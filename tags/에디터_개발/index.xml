<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>에디터_개발 on @ntalbs&#39; stuff</title>
    <link>http://ntalbs.github.io/tags/%EC%97%90%EB%94%94%ED%84%B0_%EA%B0%9C%EB%B0%9C/</link>
    <description>Recent content in 에디터_개발 on @ntalbs&#39; stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 28 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ntalbs.github.io/tags/%EC%97%90%EB%94%94%ED%84%B0_%EA%B0%9C%EB%B0%9C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>에디터 입력기 만들기</title>
      <link>http://ntalbs.github.io/2015/editor-ime/</link>
      <pubDate>Tue, 28 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/editor-ime/</guid>
      <description>&lt;p&gt;&lt;code&gt;contenteditable&lt;/code&gt;을 사용하지 않고 에디터를 개발하기로 했다면 브라우저에서 키 입력 이벤트를 받아 처리할 IME(Input Method Editor)를 만들어야 한다. 텍스트 필드나 &lt;code&gt;div&lt;/code&gt;에 텍스트를 입력할 수 있게 한 다음 여기서 키 이벤트를 받아 처리하는 방식으로 구현한다. &lt;code&gt;div&lt;/code&gt;에 텍스트를 입력하려면 &lt;code&gt;contenteditable&lt;/code&gt;을 써야 하지만, 에디터 창에 &lt;code&gt;contenteditable&lt;/code&gt;을 써서 편집하는 것과는 다르다. 개발할 때는 입력을 제대로 처리하는 지 확인하기 쉽게 IME를 표시하기도 하지만, 나중에는 IME를 보이지 않게 처리해 에디터 화면에 텍스트가 직접 입력되는 것처럼 보이게 한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>에디터 문서 모델</title>
      <link>http://ntalbs.github.io/2015/editor-doc-model/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/editor-doc-model/</guid>
      <description>&lt;p&gt;복잡한 소프트웨어를 만들 때 여러 번의 갈림길에 서게 된다. 나중에는 쉽게 알 수 있는 사실이라도 선택할 당시에는 명확하지 않아 어느 쪽이 옳은지 판단하기가 쉽지 않은 경우가 많다. 에디터에서 &lt;strong&gt;문서 모델&lt;/strong&gt;을 설계할 때도 마찬가지다. 문서 모델은 편집하는 문서를 어떤 구조로 저장하고 조작할지를 결정하는 에디터의 핵심 데이터 구조다. 문서 모델의 구조에 따라 이후 개발할 편집 기능의 구현 방향이 갈릴 것이다. 문서 모델이 잘못되어 있다면 기능 구현은 매우 피곤하고 힘든 과정이 될 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IE8, 지원 해야 할까?</title>
      <link>http://ntalbs.github.io/2014/ignoring-ie8/</link>
      <pubDate>Thu, 22 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/ignoring-ie8/</guid>
      <description>&lt;p&gt;웹 애플리케이션을 개발할 때 IE8과 같은 오래된 브라우저를 지원하지 않기로 하면 개발이 편해진다. 최신 브라우저에서 제공하는 기능을 최대한 활용할 수 있고, 오래된 브라우저에서 지원하지 않는 기능을 억지로 구현하기 위해 애쓰지 않아도 된다. 코드도 간단해진다. 그러나 세상 일이란 게 항상 그렇듯 웹 개발도 내 생각대로만 돌아가지는 않는다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>텍스트 노드 조작 insertData</title>
      <link>http://ntalbs.github.io/2014/insert-data/</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/insert-data/</guid>
      <description>텍스트 노드에 텍스트를 삽입할 때 처음에는 텍스트 노드의 textContent를 직접 조작했다. 즉 Range 객체에서 텍스트를 삽입할 위치를 구한 다음 다음과 같이 substr 함수로 텍스트를 직접 조작했다. var rng = caret.getRange(), node = rng.startContainer, offset = rng.startOffset, tc = node.textContent; node.textContent = tc.substr(0, offset) + t + tc.substr(offset); ...  코드가 마음에 들지 않았지만, 다른 방법을 몰라 어쩔 수 없이 이렇게 썼다. 그러다 Range.insertNode()를 알게 되었다. 이 녀석을 사용하면 좀더 쉽게 텍스트를 조작할 수 있다.</description>
    </item>
    
    <item>
      <title>다단계 번호 매기기</title>
      <link>http://ntalbs.github.io/2014/numbering-multi-level-list/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/numbering-multi-level-list/</guid>
      <description>요즘은 간단한 로직을 테스트할 때 Clojure로 코드를 작성해 확인해보곤 한다. 다단계 번호매기기도 Clojure를 사용해 로직을 구현해보고 생각대로 잘 되는 것을 확인한 다음 JavaScript로 옮기는 방법을 사용했다.
MS워드에는 다단계 번호매기기 기능을 사용하면 다음과 같은 식으로 다단계 번호를 매길 수 있다. 1. 항목 1 1.1 항목 11 1.2 항목 12 1.2.1 항목 121 1.2.2 항목 122 1.3 항목 13 2. 항목 2  다단계 번호는 어떻게 구현할 수 있을까? 문서 모델이 다음과 같이 되어 있다면 목록(list)을 선택해 수준(level)의 배열을 만들어 각 수준에 맞는 번호를 생성하면 될 것 같다.</description>
    </item>
    
  </channel>
</rss>