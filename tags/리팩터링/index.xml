<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>리팩터링 on @ntalbs&#39; stuff</title>
    <link>http://ntalbs.github.io/tags/%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81/</link>
    <description>Recent content in 리팩터링 on @ntalbs&#39; stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 01 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ntalbs.github.io/tags/%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>리팩터링</title>
      <link>http://ntalbs.github.io/2017/refactoring/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/refactoring/</guid>
      <description>&lt;p&gt;API Gateway를 수정하는 작업을 하다가 다음 메서드를 보았다. 주어진 문자열에서 괄호 짝이 맞는지 확인하는 함수로 파라미터가 포함된 URI를 검증할 때 사용되고 있었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>코딩 시간과 코드 품질</title>
      <link>http://ntalbs.github.io/2017/poor-code/</link>
      <pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/poor-code/</guid>
      <description>&lt;p&gt;시간이 충분하면 좋은 코드를 작성할 수 있지만, 코드 품질 따지느라 개발 기간이 늘어지는 것 보다는 빨리 개발해 서비스를 시작하는 게 중요하다는 주장을 볼 수 있다. 옳은 말이다. 요즘 같이 비즈니스 환경이 급변하는 세상에 속도가 중요한 요소임엔 틀림 없다. 그러나 코딩에 들이는 시간과 코드 품질이 비례한다는 주장에는 동의하지 않는다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>if (cond == true) return true</title>
      <link>http://ntalbs.github.io/2015/if-true-return-true/</link>
      <pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/if-true-return-true/</guid>
      <description>&lt;p&gt;회사에서 코드 리뷰를 할 때 다음과 같은 패턴의 코드가 자주 눈에 띈다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;if (condition == true) {
  return true;
} else {
  return false;
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>코드 중복과 보이스카우트 규칙</title>
      <link>http://ntalbs.github.io/2010/duplicated-codes/</link>
      <pubDate>Sun, 16 May 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/duplicated-codes/</guid>
      <description>&lt;blockquote class=&#34;blockquote-reverse&#34;&gt;캠핑 장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라!
보이스카우트 규칙 (클린 코드, p50)
&lt;/blockquote&gt;

&lt;p&gt;때로는 아주 사소한 코드 중복이 큰 문제를 만드는 경우도 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var fnCallback = $Fn(function(bSuccess, sMessage, oData) {
  //...
  if (acrobat.isInstalled) {
      this.printUrl = oData.redirectURL + &amp;quot;&amp;amp;isSilent=true&amp;quot;;
  } else {
      this.printUrl = oData.redirectURL;
  }
}, this).bind();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;중복 코드에 민감한 개발자라면 당장에 중복된 부분이 눈에 들어올 것이다. 4째 줄과 6째 줄에 &lt;code&gt;this.printUrl = oData.redirectURL&lt;/code&gt; 부분이 중복이다. 단순한 코드라서 언듯 보기에는 별 문제가 없어 보일는지 모르겠다. 그러나 꼭 그렇지만은 않다. &lt;strong&gt;문제가 생길 가능성이 있다면 꼭 문제가 생긴다.&lt;/strong&gt; 결과가 심각할수록 발생할 확율도 높아지는 것 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>코드 수정</title>
      <link>http://ntalbs.github.io/2008/refactoring/</link>
      <pubDate>Sat, 25 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/refactoring/</guid>
      <description>&lt;p&gt;소스코드를 보다가 다음과 같은 코드를 발견했다. 명령행 인수 분석해 딕셔너리에 넣는 코드인데, 이렇게 복잡할 필요가 있을까 생각되어 잠시 코드를 들여다 봤다.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>