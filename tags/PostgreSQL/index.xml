<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PostgreSQL on @ntalbs&#39; stuff</title>
    <link>http://ntalbs.github.io/tags/postgresql/</link>
    <description>Recent content in PostgreSQL on @ntalbs&#39; stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Fri, 09 Jan 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ntalbs.github.io/tags/postgresql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SQL에서 행을 열로 바꾸는 방법</title>
      <link>http://ntalbs.github.io/2015/sql-transpose/</link>
      <pubDate>Fri, 09 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/sql-transpose/</guid>
      <description>&lt;p&gt;쿼리를 작성하다 보면 행을 열로 또는 열을 행으로 바꾸고 싶은 경우가 생긴다. 데이터 모델을 만들 때 같은 종류의 데이터는 행으로 저장하는 것이 좋지만, 고객은 열로 표현된 형태의 보고서를 보고 싶을 수 있다. 쿼리 결과를 행에서 열로 또는 열에서 행으로 바꾸는 작업은 원리를 이해하면 어렵지 않지만 약간의 기교가 필요하다. 그래서인지 쿼리 결과의 행/열 전환은 SQL 관련 단골 질문이기도 하다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL Row Generator</title>
      <link>http://ntalbs.github.io/2014/mysql-row-generator/</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/mysql-row-generator/</guid>
      <description>&lt;p&gt;Oracle에서는 &lt;code&gt;connect by&lt;/code&gt;를 사용해 필요한 만큼 행(row)을 생성할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select level from dual connect by level &amp;lt;= 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PostgreSQL에서도 &lt;code&gt;generate_series&lt;/code&gt;를 사용해 쉽게 행을 만들 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from generate_series(1, 100);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;재귀적 CTE(Common Table Expressions)를 사용하면 특정 DBMS에서만 제공하는 기능을 사용하지 않고 표준 SQL만 사용해 행 생성기(row generator)를 만들 수 있다. PostgreSQL에서는 다음과 같은 식으로 원하는 만큼 행을 생성할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL 날짜 연산</title>
      <link>http://ntalbs.github.io/2010/postgresql-date/</link>
      <pubDate>Fri, 09 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/postgresql-date/</guid>
      <description>&lt;p&gt;database.sarang.net의 &lt;a href=&#34;http://database.sarang.net/?criteria=pgsql&#34;&gt;PostgreSQL 게시판&lt;/a&gt;에 PostgreSQL에서 &lt;a href=&#34;http://database.sarang.net/?inc=read&amp;amp;aid=8678&amp;amp;criteria=pgsql&amp;amp;subcrit=qna&amp;amp;id=&amp;amp;limit=20&amp;amp;keyword=&amp;amp;page=1&#34;&gt;날짜 연산 관련 질문&lt;/a&gt;이 올라왔다. 답을 생각해보면서 PostgreSQL에서 날짜 관련 함수 및 연산 방법을 간단히 정리해봤다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>데이터 생성 SQL</title>
      <link>http://ntalbs.github.io/2009/data-generator/</link>
      <pubDate>Tue, 14 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/data-generator/</guid>
      <description>&lt;p&gt;Oracle에서라면 다음 쿼리로 row를 생성할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- 1~100까지 숫자 생성 (100 rows)
select level from dual connect by level &amp;lt;= 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 row 생성 쿼리를 이용하면 테스트 데이터를 원하는 만큼 생성하는 것도 쉽고, 간단한 문제를 풀 때도 유용하다. 예를 들어 얼마 전 kldp.org에 올라왔던 1~45의 숫자 중 랜덤하게 6개를 선택해 표시하는 문제도 다음과 같이 SQL로 풀 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DBMS 성능 테스트</title>
      <link>http://ntalbs.github.io/2009/db-performance/</link>
      <pubDate>Mon, 16 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/db-performance/</guid>
      <description>&lt;p&gt;지금까지 주로 Oracle을 사용해왔으나, 현재의 회사에서는 MySQL을 주로 사용하며 일부 시스템에서 PostgreSQL을 사용한다. 현재 MySQL을 사용하는 부분에서 지속적인 성능 문제가 발생하고 있는데, 이는 MySQL을 충분히 알지 못해 나타나는 문제일 수도 있다. MySQL을 사용하면서 지금까지 알고 있던 DBMS에 대한 지식(주로 Oracle에 대한)이 무용지물인 경우가 많았기 때문이다.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>