<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on @ntalbs&#39; stuff</title>
    <link>http://ntalbs.github.io/tags/emacs/</link>
    <description>Recent content in Emacs on @ntalbs&#39; stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 12 Oct 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ntalbs.github.io/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Emacs를 이용한 단순 반복 작업</title>
      <link>http://ntalbs.github.io/2016/avoiding-tedious-task-with-emacs/</link>
      <pubDate>Wed, 12 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/avoiding-tedious-task-with-emacs/</guid>
      <description>&lt;p&gt;며칠 전 아주 지겨워 보이는 작업을 하게 되었다. 엑셀 파일에 있는 정보를 참고해 설정 파일을 수정하는 일이었다. 설정 파일은 국가별 설정 정보를 담고 있는데 각 국가별 설정에 새로운 필드를 추가해야 하고 필드의 값은 엑셀 파일을 참조해 지정해야 했다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>나의 글쓰기 도구 변천사</title>
      <link>http://ntalbs.github.io/2016/history-of-my-writing-tools/</link>
      <pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/history-of-my-writing-tools/</guid>
      <description>&lt;p&gt;그간 생각을 정리하려고 꾸준히 노력했다. 갑자기 떠오른 아이디어, 새롭게 배운 지식, 책에서 본 마음에 드는 구절, 이것 저것에 대한 잡생각 등 마음만 먹으면 쓸 거리는 넘쳐난다. 자발적으로 작성하는 문서는 모두 미래의 나를 위한 것이다. 개인적으로 보관하는 것이든 블로그에 공개하는 것이든 다른 사람에게 보여주기 보다는 내가 잊지 않으려고 정리하는 것이다. 그동안 글을 쓰는 데 여러 도구를 사용했다. 어떤 도구를 거쳐 지금에 이르렀는지 정리하는 것도 재미있을 것 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs: 최근 사용한 파일 목록</title>
      <link>http://ntalbs.github.io/2016/emacs-recent-files/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/emacs-recent-files/</guid>
      <description>&lt;p&gt;최근 사용한 파일 기능은 그리 자주 사용하는 편은 아니었다. 파일을 찾을 때 그 파일을 최근 열었는지 생각하기 보다는 직접 찾는 게 더 빠르다고 생각했다. IDE를 쓸 때는 소스 파일을 쉽게 찾을 수 있는 기능을 활용했다. 문서 작업을 할 때도 원하는 파일을 특정 디렉터리에서 빠르게 찾을 수 있었다. 아마도 문서 파일을 보관하는 디렉터리 구조도 복잡하지 않았고 파일도 많지 않았기 때문일 것이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs에서 £ 기호 입력하기</title>
      <link>http://ntalbs.github.io/2015/emacs-typing-pound-or-hash/</link>
      <pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-typing-pound-or-hash/</guid>
      <description>&lt;p&gt;최근 영국과 메일을 주고 받다 보니 영국 화폐 단위인 파운드 기호(£)를 입력하는 일이 잦아졌다. 처음에는 Mac OS X에서 제공하는 특수문자 입력 기능을 사용했지만 너무 불편했다. 영국 키보드로는 파운드 기호를 쉽게 입력할 수 있겠다 생각되어 시스템 설정에서 입력 소스를 British로 바꾸니 &lt;code&gt;Shift+3&lt;/code&gt;으로 파운드 기호를 쉽게 입력할 수 있었다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs를 쓰는 이유?</title>
      <link>http://ntalbs.github.io/2015/why-emacs/</link>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/why-emacs/</guid>
      <description>&lt;p&gt;Emacs를 쓰는 이유가 뭘까? 현대적 에디터와 비교해보면 투박하기 짝이 없는 이 구닥다리 에디터를 여지껏 사용하는 이유가 뭘까? 한참을 생각해 보았지만 명확한 이유를 설명할 수 없다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs와 Vim</title>
      <link>http://ntalbs.github.io/2015/emacs-and-vim/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-and-vim/</guid>
      <description>&lt;p&gt;프로그래머 중에는 자기가 사용하는 에디터가 최고라 주장하는 사람들이 꽤 있다. 배우기 어려운 에디터일수록 그런 경향이 큰 것 같다. 막강한 기능을 자랑하지만 배우기 힘든 에디터의 대표를 꼽는다면 단연 Emacs와 Vim일 것이다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>에디터 우월성 계층</title>
      <link>http://ntalbs.github.io/2015/editor-hierarchy/</link>
      <pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/editor-hierarchy/</guid>
      <description>&lt;p&gt;프로그래머가 사용하는 텍스트 에디터 우월성 계층을 그려보면 아래 그림과 같지 않을까? Emacs와 Vim은 서로 최고라고 주장한다. 물론 이 두 에디터 사용자는 다른 에디터를 거들떠 보지도 않을 것이다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs: 여러 파일 안의 텍스트 찾기/바꾸기</title>
      <link>http://ntalbs.github.io/2015/emacs-find-replace-on-multiple-files/</link>
      <pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-find-replace-on-multiple-files/</guid>
      <description>&lt;p&gt;hexo-math 플러그인에서 사용해 수식을 표현하는데, 예전에는 &lt;code&gt;{% raw %}{% math-block %}...{% endmath-block %}{% endraw %}&lt;/code&gt;로 수식 블록을 표시했지만 Hexo 3.0에서는 이 부분이 깨졌다. 결국 &lt;code&gt;{% raw %}{% math_block %}...{% endmath_block %}{% endraw %}&lt;/code&gt;를 사용하도록 hexo-math가 수정되었다. 이에 따라 블로그의 모든 글에서 &lt;code&gt;math-block&lt;/code&gt;을 사용하는 부분을 찾아 &lt;code&gt;math_block&lt;/code&gt;으로 바꿔줘야 했다. Emacs를 사용하면서 버퍼 안에서 찾기/바꾸기는 많이 해봐 익숙했지만 여러 파일에 대해 찾기/바꾸기를 해본 적은 없었다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs: 빈 줄 지우기</title>
      <link>http://ntalbs.github.io/2015/emacs-removing-blank-lines/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-removing-blank-lines/</guid>
      <description>&lt;p&gt;편집중인 버퍼에서 빈 줄을 모두 지우고 싶으면 어떻게 해야 할까? 코드를 작성할 때는 이런 경우가 거의 없지만 다른 파일을 편집할 때는 빈 줄을 모두 삭제해야 하는 경우가 종종 생긴다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs: 행 연결</title>
      <link>http://ntalbs.github.io/2015/emacs-joining-lines/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-joining-lines/</guid>
      <description>&lt;p&gt;코드를 편집하다 보면 여러 줄을 한 줄로 합치고 싶을 때가 종종 생긴다. 예를 들어 다음과 같은 코드가 있다고 하자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;func(arg1,
     arg2,
     arg3);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이걸 다음과 같이 바꾸고 싶다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;func(arg1, arg2, arg3);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs: Sublime Text 데모 편집 흉내</title>
      <link>http://ntalbs.github.io/2015/emacs-mimic-sublime-text-demo/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-mimic-sublime-text-demo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text 에디터&lt;/a&gt; 홈페이지에 있는 데모 화면을 보고 감탄했던 적이 있다. 특히 데모 2/6에 감탄해 Emacs에서 비슷하게 해보려 했지만 성공하지 못했다. 그동안 에디터가 많이 발전했음을 느끼며 주 사용 에디터를 Sublime Text로 바꿔볼까 생각했다. 사용해보고 마음에 들면 기꺼이 정품을 구입할 생각이었다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs를 데이터베이스 클라이언트로 사용하기</title>
      <link>http://ntalbs.github.io/2015/emacs-as-a-db-client/</link>
      <pubDate>Wed, 14 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-as-a-db-client/</guid>
      <description>&lt;p&gt;Emacs에서 데이터베이스 쿼리를 할 수 있으면 좋겠다는 생각이 들었다. 지금까지 찾은 방법은 SQLi를 이용한 방법과 edbi를 사용하는 방법 두 가지다. SQLi는 Emacs에 기본 기능을 사용하기 때문에 별도 패키지를 설치하지 않아도 되지만 기능도 기본 수준이다. edbi는 SQLi보다 풍부한 기능을 제공하지만 별도 패키지를 설치해야 하고 &lt;code&gt;cpan&lt;/code&gt;으로 &lt;code&gt;RPC::EPC::Service&lt;/code&gt;, &lt;code&gt;DBI&lt;/code&gt;, 데이터베이스 드라이버 등의 Perl 모듈을 설치해야 한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>정규 표현식을 이용한 찾기/바꾸기 시 카운터 사용</title>
      <link>http://ntalbs.github.io/2014/regexp-counter/</link>
      <pubDate>Fri, 05 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/regexp-counter/</guid>
      <description>&lt;p&gt;반복된 패턴을 찾아 다른 문자열로 치환하고 싶을 때 정규 표현식을 사용하면 편리하다. 지금까지는 정규 표현식을 사용해 문자를 치환할 때 고정된 패턴만 지정할 수 있다고 생각했다. 그래서 스택오어플로우에서 정규 표현식으로 문자열을 치환할 때 카운터(counter)를 사용할 수 있냐는 질문을 봤을 때 &amp;lsquo;되지도 않는 질문&amp;rsquo;이라 속단했다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>visual-regexp</title>
      <link>http://ntalbs.github.io/2014/visual-regexp/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/visual-regexp/</guid>
      <description>&lt;p&gt;Emacs나 Vim을 사용할 때 &lt;strong&gt;정규표현식&lt;/strong&gt;을 자주 활용한다. Vim의 정규표현식에는 조금 익숙해 졌는데 Emacs의 정규표현식은 Vim과 미묘하게 달라 가끔 애를 먹일 때가 있다. 그런데 최근 &lt;a href=&#34;https://github.com/benma/visual-regexp.el&#34;&gt;visual-regexp&lt;/a&gt;를 알게 되었다. Emacs에 원래 있는 &lt;code&gt;replace-regexp&lt;/code&gt;와 비슷한 녀석인데 정규표현식을 입력하면 편집중인 버퍼에 피드백이 즉시 표시된다. 따라서 입력하고 있는 정규표현식에 대응되는 문자열, 캡쳐링되는 부분까지 바로 확인할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs</title>
      <link>http://ntalbs.github.io/2014/emacs/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/emacs/</guid>
      <description>Emacs를 시작한 것은 꽤 오래 전이지만, 그동안 계속 사용한 것은 아니어서 지금도 Emacs 초보자 수준을 벗어나지 못하고 있다. 예전에 Java를 많이 사용할 때는 Eclipse를 썼는데, 요즘은 주로 JavaScript로 작업하다보니 다시 Emacs로 돌아오게 되었다. JavaScript(또는 다른 스크립트 언어)로 개발할 때 Eclipse는 무겁기만 하고 편하지도 않다. 어떻게 보면 Emacs는 구식 에디터이기 때문에 Sublime Text와 같이 최근에 나온 에디터와 비교하면 조금 투박한 면이 없지 않다. Sublime Text를 잠시 써보려 했지만 Sublime Text만의 독특한 단축키에 적응하지 못할 것 같아 포기했다.</description>
    </item>
    
  </channel>
</rss>