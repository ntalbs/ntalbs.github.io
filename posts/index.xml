<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on @ntalbs&#39; stuff</title>
    <link>http://ntalbs.github.io/posts/</link>
    <description>Recent content in Posts on @ntalbs&#39; stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 27 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ntalbs.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>프로젝트 오일러 93</title>
      <link>http://ntalbs.github.io/2018/project-euler-093/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/project-euler-093/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;숫자 4개와 사칙연산을 써서 가장 길게 이어지는 숫자 만들기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=93&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=93&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;숫자 네 개에 사칙연산자를 세 개 사용할 수 있으므로, 각 숫자를 A, B, C, D라 하고 사칙연산자를 &lt;code&gt;Op&lt;sub&gt;1&lt;/sub&gt;&lt;/code&gt;, &lt;code&gt;Op&lt;sub&gt;2&lt;/sub&gt;&lt;/code&gt;, &lt;code&gt;Op&lt;sub&gt;3&lt;/sub&gt;&lt;/code&gt;라 하면, 다음과 같은 조합을 생각할 수 있다. 모든 연산은 괄호로 둘러싸 연산자 우선순위를 고려하지 않게 하면 생각하기가 조금 쉬워진다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>소득신고</title>
      <link>http://ntalbs.github.io/2018/uk-tax-return/</link>
      <pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/uk-tax-return/</guid>
      <description>&lt;p&gt;일을 미루는 것은 내 오랜 습관이다. 이번 소득신고 사건 역시 내 오랜 습관의 연장선에 있다. 영국의 과세연도는 매년 4월 6일부터 그 다음해 4월 5일까지다. 온라인 소득신고 마감일은 해당 과세 연도의 다음해 1월 말이다. 종합소득세 신고를 5월 한 달 동안 마쳐야 하는 한국에 비하면 신고 기간이 상당히 여유있게 주어졌다 할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 92</title>
      <link>http://ntalbs.github.io/2018/project-euler-092/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/project-euler-092/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;자릿수를 제곱해서 더해가는 수열의 신기한 성질&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=92&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=92&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;무차별-대입법&#34;&gt;무차별 대입법&lt;/h2&gt;

&lt;p&gt;일단 무식한 방법으로 풀어보자. 1부터 1천만까지 숫자를 대입하면서 자릿수를 제곱해 더한 수가 89에 도달하는지 확인하는 방법이다. 자릿수를 제곱해 더한 수를 구하는 함수는 다음과 같이 간단히 작성할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>영어 선생님</title>
      <link>http://ntalbs.github.io/2018/english-teacher/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/english-teacher/</guid>
      <description>&lt;p&gt;영국에 와 팀에 합류했을 때 영어로 의사소통하는 것에 어려움을 느꼈다. 특히 영국 사람들이 하는 말을 알아 듣기 힘들었다. 팀 동료가 내 어려움을 알아채고는 회사에서 지원 방법이 있는지 알아보겠다고 했다. 그리고 매니저가 영어 회화 강좌를 들을 수 있게 해 주었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>바둑</title>
      <link>http://ntalbs.github.io/2018/baduk/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/baduk/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://ntalbs.github.io/images/2018/baduk/baduk.png&#34; alt=&#34;Example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;한동안 바둑을 두지 않다가 최근 다시 바둑을 두기 시작했다. &lt;a href=&#34;https://online-go.com/&#34;&gt;Online-Go&lt;/a&gt;란 사이트를 알게 된 다음부터다. 한국의 바둑 사이트와 달리 구글 아이디로 계정을 만들 수 있고, 별도 프로그램 설치 없이 브라우저에서 바둑을 둘 수 있다. 편리한 만큼 내게는 독이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 91</title>
      <link>http://ntalbs.github.io/2018/project-euler-091/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/project-euler-091/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;사분면 안의 직각삼각형 개수 세기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=91&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=91&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1사분면 $0 \le x, y \le 50$에서 P의 가능한 위치는 모두 $51 \times 51$이고 Q의 가능한 위치도 $51 \times 51$이다. 무차별 대입법으로 문제를 푼다면 $51^4 = 6,765,201$번의 루프를 돌면서 직각인지 확인해야 하므로 빠른 시간에 답을 구하지 못한다. 이 방법으로 문제를 풀면 내 환경에서는 답을 구하는 데 7초 이상 걸린다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 90</title>
      <link>http://ntalbs.github.io/2018/project-euler-090/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/project-euler-090/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;정육면체 두 개로 제곱수 만들기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=90&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=90&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;100 미만의 제곱수는 아홉 가지 뿐이고, 숫자 10개 중 6개를 고르는 경우의 수도 210($_{10}C_6 = 210$)으로 비교적 작으므로, 모든 조합을 구해 계산해 보는 무식한 방법을 적용해도 문제를 풀 수 있을 것 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 89</title>
      <link>http://ntalbs.github.io/2018/project-euler-089/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/project-euler-089/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;로마숫자 최적화하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=89&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=89&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;먼저 다음과 같이 텍스트 파일을 읽어 시퀀스로 만들어둔다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns p089
  (:require [clojure.string :as str]))

(def romans (str/split (slurp &amp;quot;data/roman.txt&amp;quot;) #&amp;quot;\r\n&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 88</title>
      <link>http://ntalbs.github.io/2018/project-euler-088/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/project-euler-088/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;일정한 개수의 숫자들을 더해도 곱해도 같은 값이 되는 경우 조사하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=88&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=88&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://ntalbs.github.io/2017/project-euler-083/&#34;&gt;문제 83&lt;/a&gt;과 더불어 내게 가장 어려운 문제 중 하나였다. 안타깝지만 이 문제는 내 두뇌 용량을 넘는 문제여서 풀이를 보고도 이해할 수가 없었다. 아래 코드는 다른 블로그에서 찾은 Python 풀이를 Clojure로 옮긴 것에 불과하다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>불운 4</title>
      <link>http://ntalbs.github.io/2018/bad-luck-4/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/bad-luck-4/</guid>
      <description>&lt;p&gt;1월 말 교통사고가 났다. 아내는 큰 아이 학교 데려다 주고 오는 길이었다. 아내의 설명에 따르면 사고 당시 상황은 다음과 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>글쓰기</title>
      <link>http://ntalbs.github.io/2018/on-writing/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/on-writing/</guid>
      <description>&lt;p&gt;학창 시절, 방학을 맞는 것은 신나는 일이었지만, 방학 숙제로 빠지지 않고 나오는 글짓기 숙제는 정말 싫었다. 방학 초기에는 정신 없이 놀기 바빠 숙제는 안중에 없었다. 방학 중간 쯤 되면 슬슬 글짓기 숙제 때문에 스트레스를 받기 시작하지만 아직 여유가 있다고 생각하며 미루었다. 개학이 며칠 남지 않은 시점이 돼서야 부랴부랴 숙제를 시작하려 하지만 싫어 하던 게 갑자기 잘 될리 없다. 독후감의 경우에는 더 대책이 없었다. 책도 읽지 않았으니.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>아마존에서 보낸 2년</title>
      <link>http://ntalbs.github.io/2018/two-years-at-amazon/</link>
      <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2018/two-years-at-amazon/</guid>
      <description>&lt;p&gt;영국에 온지 벌써 두 해가 지났다. 아마존 런던 개발 센터에 와서 합류한 팀은 티어1 서비스만 네 개를 맡고 있었다. 매니저 짐은 한국에서 전화로 얘기했을 때도 느낌이 좋았는데, 직접 만나니 더 좋은 사람이었다. 회사 일뿐 아니라 개인 일을 처리하는 데도 많은 도움을 주었다. 다른 영국 사람들의 발음은 알아듣기가 어려웠는데, 짐의 발음은 비교적 잘 들렸다. 팀에는 영국, 폴란드, 슬로바키아, 인도, 이란 출신 엔지니어가 있었고 액센트도 다양해 적응하기가 더욱 어려웠다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>불운 3</title>
      <link>http://ntalbs.github.io/2017/bad-luck-3/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/bad-luck-3/</guid>
      <description>&lt;p&gt;회사에 있는데 아내에게 전화가 왔다. 전화를 받았더니 집에 도둑이 들었다, 침실 앞에 칼이 있었다고 소리를 질렀다. 아내를 진정시키고 자초지정을 물었다. 다행히 도둑은 떠난 뒤였다. 999로 전화해 경찰에 신고했다. 바로 집으로 떠나려 했지만, 상담원이 계속 질문을 해서 출발할 수 없었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HttpClient 테스트</title>
      <link>http://ntalbs.github.io/2017/http-client-test/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/http-client-test/</guid>
      <description>&lt;p&gt;Java 9에는 모듈 시스템, 링킹, JShell 등 여러 가지 중요한 기능이 추가됐지만, 새로운 HTTP API에 가장 큰 관심이 갔다. 이 녀석을 활용하면 우리 팀에서 개발하는 서비스 코드를 훨씬 읽기 좋게 바꿀 수 있을 것 같다는 생각이 들었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>이사</title>
      <link>http://ntalbs.github.io/2017/move/</link>
      <pubDate>Tue, 08 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/move/</guid>
      <description>&lt;p&gt;지난 주, &lt;a href=&#34;https://www.google.ie/maps/place/Woking,+UK/@51.3150916,-0.5856425,13z/data=!3m1!4b1!4m5!3m4!1s0x4875d41816d163b7:0x20f9e2ba0648b374!8m2!3d51.316774!4d-0.5600349?hl=en&#34;&gt;워킹(Woking)&lt;/a&gt;에서 &lt;a href=&#34;https://www.google.ie/maps/place/Sutton,+UK/@51.3587483,-0.2402007,13z/data=!3m1!4b1!4m5!3m4!1s0x4875e280183c1fe7:0xda26308044d5ef66!8m2!3d51.3614279!4d-0.193961?hl=en&#34;&gt;서튼(Sutton)&lt;/a&gt;으로 이사했다. 워킹은 살기 좋은 곳이지만, 학교가 별로 좋지 않았다. 서튼으로 가면 출퇴근은 불편해지지만 좋은 학교가 많다. 아이들을 위해서는 서튼이 나을 것이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 87</title>
      <link>http://ntalbs.github.io/2017/project-euler-087/</link>
      <pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/project-euler-087/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;소수의 제곱 + 소수의 3제곱 + 소수의 4제곱으로 나타낼 수 있는 숫자&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=87&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=87&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;$a, b, c$를 소수라 했을 때, $a, b, c$의 모든 조합에 대해 $a^2+b^3+c^4$을 구한 다음, $50,000,000$이하의 수를 추려 중복을 제거한 후 개수를 세면 문제의 답을 구할 수 있다. 다만 $a, b, c$를 무한대까지 계산할 수는 없으므로 적절한 범위를 지정해야 한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>불운 2</title>
      <link>http://ntalbs.github.io/2017/bad-luck-2/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/bad-luck-2/</guid>
      <description>&lt;p&gt;2월 초, 아내 휴대폰 문제와 동시에 자동차에도 문제가 생겼다. 아내 휴대폰이 없는 상태에서 자동차 문제를 해결하려다 보니 일이 복잡해졌다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>불운 1</title>
      <link>http://ntalbs.github.io/2017/bad-luck-1/</link>
      <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/bad-luck-1/</guid>
      <description>&lt;p&gt;나쁜 일은 한꺼번에 찾아온다고 했던가. 여러 사건이 복잡하게 얽혀 있어 설명하기도 쉽지가 않지만, 두 가지 핵심 축은 휴대폰과 자동차라 할 수 있겠다. 여기서는 휴대폰 문제를 먼저 이야기하려 한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>리팩터링</title>
      <link>http://ntalbs.github.io/2017/refactoring/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/refactoring/</guid>
      <description>&lt;p&gt;API Gateway를 수정하는 작업을 하다가 다음 메서드를 보았다. 주어진 문자열에서 괄호 짝이 맞는지 확인하는 함수로 파라미터가 포함된 URI를 검증할 때 사용되고 있었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>코딩 시간과 코드 품질</title>
      <link>http://ntalbs.github.io/2017/poor-code/</link>
      <pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/poor-code/</guid>
      <description>&lt;p&gt;시간이 충분하면 좋은 코드를 작성할 수 있지만, 코드 품질 따지느라 개발 기간이 늘어지는 것 보다는 빨리 개발해 서비스를 시작하는 게 중요하다는 주장을 볼 수 있다. 옳은 말이다. 요즘 같이 비즈니스 환경이 급변하는 세상에 속도가 중요한 요소임엔 틀림 없다. 그러나 코딩에 들이는 시간과 코드 품질이 비례한다는 주장에는 동의하지 않는다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 86</title>
      <link>http://ntalbs.github.io/2017/project-euler-086/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/project-euler-086/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;육면체의 한쪽 구석에서 다른 구석으로 가는 최단 경로 찾기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=86&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=86&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;직육면체를 펼쳐 평면으로 생각하면 문제를 푸는 데 도움이 된다. 평면 위의 한 점에서 다른 점으로 가는 최단 경로는 직선이다. 한쪽 구석 $S$에서 다른 구석 $F$로 가는 경로는 네 가지가 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 85</title>
      <link>http://ntalbs.github.io/2017/project-euler-085/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/project-euler-085/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;사각 격자 안에 포함된 사각형 개수 세기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=85&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=85&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;가로 $m$ 세로 $n$인 격자에서 각 크기의 사각형이 몇 개씩 들어가는지 생각해보자. 크기(가로$\times$세로)가 $1 \times 1$인 사각형은 생각할 것도 없이 $m \times n$개가 들어간다. 크기가 $1 \times 2$인 사각형은 가로 방향으로는 $m$개, 세로 방향으로는 $n-1$개가 들어갈 수 있으므로 개수는 $m \times (n-1)$이 될 것이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 84</title>
      <link>http://ntalbs.github.io/2017/project-euler-084/</link>
      <pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/project-euler-084/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;모노폴리 게임을 4면체 주사위로 할 때 가장 많이 방문하는 칸은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=84&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=84&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문제를 수학적으로 푸는 방법이 있는지 모르겠다. 여기서는 문제에 주어진 게임 규칙을 모두 구현한 후, 직접 사면체 주사위를 1백만 번 던져 어느 칸을 가장 많이 방문했는지 세는 방법으로 문제를 풀었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 83</title>
      <link>http://ntalbs.github.io/2017/project-euler-083/</link>
      <pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/project-euler-083/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;상하좌우로 움직여서 좌상단→우하단으로 가는 경로의 합이 최소인 경우는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=83&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=83&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문제에는 두 가지 복병이 기다리고 있었다. 하나는 &lt;a href=&#34;https://en.wikipedia.org/wiki/A*_search_algorithm&#34;&gt;A* Search Algorithm&lt;/a&gt; 알고리즘이었다. 여러 가지 방법을 생각해 보았지만 A* 알고리즘을 사용하지 않고는 풀 수 없었다. 구글로 검색해보면 A* 알고리즘에 대한 설명을 찾을 수 있지만 이해하기가 쉽지 않았다. 얼마 전 &lt;a href=&#34;https://www.coursera.org&#34;&gt;Couresra&lt;/a&gt;에서 &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part1&#34;&gt;Algorithms, Part I&lt;/a&gt;을 수강한 후에야 A* 알고리즘을 이해할 수 있었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 82</title>
      <link>http://ntalbs.github.io/2017/project-euler-082/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/project-euler-082/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;맨 왼쪽 열에서 맨 오른쪽 열까지 가는 경로의 합이 최소인 경우는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=82&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=82&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;시작 위치와 종료 위치가 고정되어 있지 않다. 맨 왼쪽 열의 아무 곳에서 시작해 맨 오른쪽 열의 아무 곳에나 도착하기만 하면 된다. 위/아래/오른쪽 세 방향으로 이동할 수 있다. 왼쪽으로는 이동할 수 없다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 81</title>
      <link>http://ntalbs.github.io/2017/project-euler-081/</link>
      <pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/project-euler-081/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;오른쪽과 아래로만 움직이면서 좌상단→우하단으로 가는 경로의 합이 최소인 경우는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=81&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=81&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문제는 앞에서 풀었던 &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-018/&#34;&gt;문제 18&lt;/a&gt;과 매우 비슷하다. 행렬을 시계 방향으로 45° 돌려놓고 생각하면 편하다. 문제 18에서는 삼각형 바닥부터 위로 올라가면서 계산하면 됐다. 여기서는 삼각형뿐 아니라 역삼각형도 고려해야 한다는 차이가 있을 뿐이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sandbox의 뜻</title>
      <link>http://ntalbs.github.io/2017/sandbox/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2017/sandbox/</guid>
      <description>&lt;p&gt;프로그래밍 또는 보안 관련 책을 읽다 보면 종종 &amp;lsquo;모래상자&amp;rsquo;란 용어가 나온다. &amp;lsquo;sandbox&amp;rsquo;를 &amp;lsquo;모래상자&amp;rsquo;로 번역한 것이다. &amp;lsquo;모래상자&amp;rsquo;란 단어를 보면 어떤 그림이 떠오르는가? &amp;lsquo;sandbox&amp;rsquo;를 직역하면 &amp;lsquo;모래상자&amp;rsquo;가 맞긴 하지만, 나는 이렇게 번역하는 게 마음에 들지 않는다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>출퇴근 시간</title>
      <link>http://ntalbs.github.io/2016/commuting/</link>
      <pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/commuting/</guid>
      <description>&lt;p&gt;출퇴근 시간이 적을 수록 좋다고 생각했다. 회사와 집이 멀리 떨어져 있으면 출퇴근에 많은 에너지를 쓰게 된다. 몸도 힘들고 시간도 아깝다. 1시간이 넘으면 계속 다니기가 힘들게 느껴졌다. 그래서 가급적 회사 근처에 집을 얻곤 했다. &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>영국에서의 1년</title>
      <link>http://ntalbs.github.io/2016/one-year-in-uk/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/one-year-in-uk/</guid>
      <description>&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;

&lt;p&gt;가족과 함께 외국에 와서 적응하는 것은 생각했던 것보다 어려웠다. 내 한 몸 챙기기도 버거운데 가족 일까지 신경을 써야 해서 힘에 부쳤다. 한국에서 회사를 옮긴 경우에는 새 회사에 적응하는 데 집중할 수 있었지만, 여기서는 나만 적응한다고 되는 게 아니다. 다른 식구들도 새로운 환경에 적응할 수 있도록 도와야 한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 80</title>
      <link>http://ntalbs.github.io/2016/project-euler-080/</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-080/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;무리수인 제곱근들의 자릿수 더하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=80&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=80&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문제를 푸는 데 &lt;code&gt;Math.sqrt&lt;/code&gt;를 사용할 수는 없다. &lt;code&gt;Math.sqrt&lt;/code&gt;가 리턴하는 &lt;code&gt;double&lt;/code&gt; 형의 유효자리 숫자는 고작 17자리에 불과하다. 제곱근의 자릿수를 원하는 만큼 구할 수 있는 다른 방법이 필요하다. 다행히 &lt;a href=&#34;http://www.afjarvis.staff.shef.ac.uk/maths/jarvisspec02.pdf&#34;&gt;Sqrt root by substraction&lt;/a&gt;에 정수의 제곱근을 구하는 방법이 자세히 나와 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 79</title>
      <link>http://ntalbs.github.io/2016/project-euler-079/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-079/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;접속 기록으로부터 비밀번호 알아내기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=79&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=79&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;접속 기록 데이터가 많지 않으므로 코드를 아무렇게나 짜도 답을 빠르게 구할 수 있을 것이다. 먼저 다음과 같이 접속 기록을 읽는 코드를 작성한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def keylog
  (-&amp;gt; (slurp &amp;quot;data/keylog.txt&amp;quot;)
      (clojure.string/split #&amp;quot;\r\n&amp;quot;)
      distinct
      sort))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;중복을 제거하면 접속 기록이 서른 세 개밖에 되지 않는다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 78</title>
      <link>http://ntalbs.github.io/2016/project-euler-078/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-078/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;동전을 여러 더미로 나누는 경우의 수 세기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=78&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=78&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;동전을 여러 더미로 나누는 방법의 수는 정수를 덧셈으로 표시할 수 있는 방법의 수와 같다. 위키백과를 찾아보면 다음과 같이 공식이 나와 있다.&lt;/p&gt;

&lt;div&gt;$$
\begin{aligned}
  p(n) &amp;= \sum_{k \neq 0} (-1)^{k-1}p(n - g_k) \\
  g_k &amp;= \frac{k(3k-1)}{2}
\end{aligned}
$$&lt;/div&gt;

&lt;p&gt;$n$을 증가시키면서 $p(n)$을 구해 1백만으로 나누어 떨어지는지 확인하는 방법으로 답을 찾을 수 있다. $p(n)$을 구하는 데 필요한 $g_k$는 다음과 같이 쉽게 구현할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs를 이용한 단순 반복 작업</title>
      <link>http://ntalbs.github.io/2016/avoiding-tedious-task-with-emacs/</link>
      <pubDate>Wed, 12 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/avoiding-tedious-task-with-emacs/</guid>
      <description>&lt;p&gt;며칠 전 아주 지겨워 보이는 작업을 하게 되었다. 엑셀 파일에 있는 정보를 참고해 설정 파일을 수정하는 일이었다. 설정 파일은 국가별 설정 정보를 담고 있는데 각 국가별 설정에 새로운 필드를 추가해야 하고 필드의 값은 엑셀 파일을 참조해 지정해야 했다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On Call</title>
      <link>http://ntalbs.github.io/2016/on-call/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/on-call/</guid>
      <description>&lt;p&gt;아마존에 오기 전 아마존이 다닐만한 회사인지 조사하는 데, 온콜에 대한 불만을 토로하는 글이 많이 보였다. 온콜이 뭐길래 그러지? 사전을 찾아보니 다음과 같이 설명되어 있다. 우리 말로 하면 &amp;lsquo;당직&amp;rsquo;과 비슷한 개념일 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 77</title>
      <link>http://ntalbs.github.io/2016/project-euler-077/</link>
      <pubDate>Mon, 12 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-077/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;소수의 합으로 나타내는 방법이 5000가지가 넘는 최초의 숫자는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=77&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=77&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문제도 바로 전에 풀었던 &lt;a href=&#34;http://ntalbs.github.io/2016/project-euler-076/&#34;&gt;문제 76&lt;/a&gt;과 마찬가지로 &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-031/&#34;&gt;문제 31&lt;/a&gt;비슷하다. 여기서는 동전의 종류가 소수라고 생각하면 된다. 따라서 인덱스를 넣으면 소수가 나오는 맵을 만들어 두면 문제 풀이에 활용할 수 있다. 소수는 100개 정도 준비하면 충분할 것 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 76</title>
      <link>http://ntalbs.github.io/2016/project-euler-076/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-076/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;숫자 100을 두 개 이상의 자연수의 합으로 나타내는 방법은 모두 몇 가지?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=76&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=76&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문제는 영국 화폐 액면가를 조합하는 수를 계산했던 &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-031/&#34;&gt;문제 31&lt;/a&gt;과 비슷하다. 문제 31에서는 동전의 종류가 여덟가지 였지만, 이 문제에서는 동전의 종류가 1, 2, &amp;hellip;, 99까지 99가지가 있다고 생각할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>설득</title>
      <link>http://ntalbs.github.io/2016/persuading/</link>
      <pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/persuading/</guid>
      <description>&lt;p&gt;동료와 리팩터링하다 다음과 같은 코드를 만났다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private Map&amp;lt;String, Integer&amp;gt; getCountryCodeCountMap(String customerId) {
  List&amp;lt;String&amp;gt; countries = getCountryList(customerId);

  Map&amp;lt;String, Integer&amp;gt; countryCodeMap = new HashMap&amp;lt;&amp;gt;();
  for (String cc : countries) {
    if (StringUtils.isNotBlank(cc)) {
      countryCodeMap.put(cc, countryCodeMap.getOrDefault(cc, 0) + 1);
    }
  }
  return countryCodeMap;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 75</title>
      <link>http://ntalbs.github.io/2016/project-euler-075/</link>
      <pubDate>Wed, 24 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-075/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;직각삼각형을 만들어내는 방법이 한 가지 뿐인 경우 세기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=75&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=75&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;합이 $1,500,000$ 이하인 &lt;a href=&#34;https://en.wikipedia.org/wiki/Pythagorean_triple&#34;&gt;피타고라스 수(Pythagorean Triplet)&lt;/a&gt;의 시퀀스를 생성한 다음, 합으로 &lt;code&gt;group-by&lt;/code&gt; 해서 값(피타고라스 수 목록)의 길이가 $1$인 키의 개수를 세면 된다. 피타고라스 수를 구하는 방법은 &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-039/&#34;&gt;문제 39&lt;/a&gt;에서 설명했다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 74</title>
      <link>http://ntalbs.github.io/2016/project-euler-074/</link>
      <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-074/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;자릿수의 계승값을 더해갈 때, 반복이 일어나기 전의 단계가 60번인 경우 찾기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=74&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=74&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;각 자릿수의 계승값을 더하는 함수는 다음과 같이 간단히 작성할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn- fact-sum [n]
  (-&amp;gt;&amp;gt; (digits n)
       (map factorial)
       (apply +)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>영국 인터넷 뱅킹</title>
      <link>http://ntalbs.github.io/2016/online-banking-in-uk/</link>
      <pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/online-banking-in-uk/</guid>
      <description>&lt;p&gt;한국의 인터넷 뱅킹이 개떡 같은 것은 더 말할 필요도 없다. 영국에서는 별도 보안 프로그램 설치 없이 인터넷 브라우저만으로 쾌적하게 은행 업무를 볼 수 있다. 아마 한국을 제외한 다른 나라도 마찬가지일 것 같다. 영국 은행에서 보안 프로그램 없이 어떻게 안전한 뱅킹 서비스를 제공하는지 살펴보자. 영국의 모든 은행에 계좌를 만들어 인터넷 뱅킹을 해본 것은 아니고, 내 주 거래 은행의 인터넷 뱅킹 경험을 바탕으로 설명하는 것임에 유의하기 바란다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>가장 뿌듯했던 순간</title>
      <link>http://ntalbs.github.io/2016/my-proud-moments/</link>
      <pubDate>Thu, 04 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/my-proud-moments/</guid>
      <description>&lt;blockquote class=&#34;blockquote-reverse&#34;&gt;그 여정이 바로 보상이다.
- 스티브 잡스&lt;/blockquote&gt;

&lt;p&gt;초등학교 때 사촌 동생 집에서 Apple II 컴퓨터를 처음 본 순간 컴퓨터 세계로 빠져들었다. 그러나 사촌 동생 집은 멀어서 매일 갈 수가 없었다. 다행히 친한 친구 집에서 SPC1000 이란 컴퓨터가 있었다. 나는 매일 친구 집에 놀러가서 친구와 함께 컴퓨터를 가지고 놀았다. 친구가 귀찮에 생각했을 지도 모르겠다. 나중에 나도 부모님을 졸라 컴퓨터를 장만했다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 73</title>
      <link>http://ntalbs.github.io/2016/project-euler-073/</link>
      <pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-073/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;분모가 12,000 이하일 때 1/3과 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 사이에 위치한 기약 진분수의 개수&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=73&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=73&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;무차별-대입법&#34;&gt;무차별 대입법&lt;/h2&gt;

&lt;p&gt;분모가 12,000 이하인 경우만 조사하면 되므로 분자와 분모에 12,000 이하의 수를 대입해가며 분수를 만들어 1/3과 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 사이의 기약 진부수를 세는 방법으로 답을 구할 수 있을 것 같다. 분모는 3부터 12,000까지, 분자는 분모/3 ~ 분모/2 사이의 정수를 대입해보면 된다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 72</title>
      <link>http://ntalbs.github.io/2016/project-euler-072/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-072/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;분모가 1백만 이하인 기약 진분수의 개수&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=72&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=72&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;분모가 $d$인 경우 기약 진분수의 개수는 $d$와 서로 소인 정수의 개수와 같다. 이는 &lt;a href=&#34;https://en.wikipedia.org/wiki/Euler%27s_totient_function&#34;&gt;Euler’s totient function&lt;/a&gt;의 정의와 동일하다. 따라서 분모가 1백만 이하인 기약 진분수의 개수를 $S$라 하면 $S$는 다음과 같이 구할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 71</title>
      <link>http://ntalbs.github.io/2016/project-euler-071/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-071/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;기약 진분수를 커지는 순으로 늘어놓기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=71&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=71&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;분모가 $n$보다 작거나 같은 0과 1 사이의 기약 진분수의 수열을 &lt;a href=&#34;http://en.wikipedia.org/wiki/Farey_sequence&#34;&gt;Farey sequence&lt;/a&gt;라 한다. 이 수열에서 $\frac{a}{b}$와 $\frac{c}{d}$가 이웃이고 $\frac{a}{b} &amp;lt; \frac{c}{d}$면, 두 수의 차는 $\frac{a}{b} - \frac{c}{d} = \frac{1}{bd}$가 되어야 한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java에서 배열 합치기</title>
      <link>http://ntalbs.github.io/2016/java-array-merge/</link>
      <pubDate>Sat, 18 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/java-array-merge/</guid>
      <description>&lt;p&gt;옆 자리 동료가 Java에서 배열을 합치는 간단한 방법이 있는지 질문했다. 열 개 정도의 배열을 하나로 합치고 싶다는 것이었다. 당장 떠오른 방법은 &lt;code&gt;System.arraycopy&lt;/code&gt;를 사용하는 것이었지만 이걸 몰라서 물어보지는 않았을 것이다. &lt;code&gt;System.arraycopy&lt;/code&gt;를 사용하면 효율적이긴 하겠지만 코드는 별로 예쁘지 않을 것이다. 혹시 이미 이 기능을 구현한 라이브러리가 있나 확인했지만 찾을 수 없었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>나의 글쓰기 도구 변천사</title>
      <link>http://ntalbs.github.io/2016/history-of-my-writing-tools/</link>
      <pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/history-of-my-writing-tools/</guid>
      <description>&lt;p&gt;그간 생각을 정리하려고 꾸준히 노력했다. 갑자기 떠오른 아이디어, 새롭게 배운 지식, 책에서 본 마음에 드는 구절, 이것 저것에 대한 잡생각 등 마음만 먹으면 쓸 거리는 넘쳐난다. 자발적으로 작성하는 문서는 모두 미래의 나를 위한 것이다. 개인적으로 보관하는 것이든 블로그에 공개하는 것이든 다른 사람에게 보여주기 보다는 내가 잊지 않으려고 정리하는 것이다. 그동안 글을 쓰는 데 여러 도구를 사용했다. 어떤 도구를 거쳐 지금에 이르렀는지 정리하는 것도 재미있을 것 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 70</title>
      <link>http://ntalbs.github.io/2016/project-euler-070/</link>
      <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-070/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;φ(n)이 n의 순열이 되는 수 조사하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=70&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=70&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 69</title>
      <link>http://ntalbs.github.io/2016/project-euler-069/</link>
      <pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-069/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;n/φ(n)이 최대가 되는 1백만 이하의 n 찾기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=69&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=69&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>아마존에서의 첫 작업</title>
      <link>http://ntalbs.github.io/2016/first-task-at-amazon/</link>
      <pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/first-task-at-amazon/</guid>
      <description>&lt;p&gt;입사한 지 두 달 만에 의미 있는 일을 하게 되었다. 새로운 프로젝트에서 사용할 &lt;strong&gt;메트릭 라이브러리&lt;/strong&gt;를 만드는 작업이었다. 서비스가 호출될 때 또는 서비스 내에서 다른 다운스트림 서비스를 호출할 때 메트릭 정보를 남겨두면 모니터링 도구를 이용해 서비스가 호출된 횟수, 요청을 처리하는 데 걸린 시간, 다운스트림 서비스를 호출하는 데 걸린 시간, 오류 발생 빈도 등을 확인할 수 있다. 아마존은 이미 이런 작업을 위한 내부 도구를 갖추고 있다. 메트릭 정보를 기록하는 라이브러리도 있다. 내가 할 일은 우리 팀에서 새로 개발할 서비스에서 메트릭 정보를 쉽게 남길 수 있게 하는 라이브러리를 만드는 일이었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>과도한 AB 테스트</title>
      <link>http://ntalbs.github.io/2016/excessive-ab-testing/</link>
      <pubDate>Wed, 25 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/excessive-ab-testing/</guid>
      <description>&lt;p&gt;AB 테스트에 대한 글을 읽으면, 간단한 문구 수정이나 버튼 색상 변경 만으로도 전환율이 몇 배 이상 높아졌다, 매출이 몇 십 퍼센트 늘어났다는 주장을 쉽게 볼 수 있다. 단순한 변경만으로 그런 극적인 효과를 얻을 수 있다는 게 미덥지 않지만, 어떤 변경이 긍정적 효과를 주는지 확인하는 수단으로 AB 테스트는 좋은 방법이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 68</title>
      <link>http://ntalbs.github.io/2016/project-euler-068/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-068/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;마방진 성질을 갖는 5각 도형에서 얻을 수 있는 16자리 수의 최대값 구하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=68&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=68&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;5각 도형의 빈 칸을 다음과 같이 $a, b, &amp;hellip;, j$로 지정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ntalbs.github.io/images/2016/project-euler-068/p068.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 67</title>
      <link>http://ntalbs.github.io/2016/project-euler-067/</link>
      <pubDate>Sat, 21 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-067/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;삼각형에서 경로의 합 중 최대값을 구하는 효율적인 방법은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=67&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=67&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-018/&#34;&gt;문제 18&lt;/a&gt;과 동일한 문제다. 문제 18에서는 삼각형이 15층에 불과했지만, 여기서는 100층이다. 문제 18에서 이미 제대로 된 방법으로 문제를 풀었기 때문에 똑같은 방법을 사용해 문제를 풀 수 있다. 텍스트 파일로 주어진 데이터를 읽어들이는 코드만 추가해주면 된다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>영국 운전면허 교환</title>
      <link>http://ntalbs.github.io/2016/uk-drivers-license/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/uk-drivers-license/</guid>
      <description>&lt;p&gt;국제운전면허증이 있다면 영국에서 운전하는 것이 가능하지만, 국제운전면허증은 유효기간이 1년밖에 되지 않는다. 장기간 영국에 체류하며 운전하려면 영국 운전면허증으로 교환해야 한다. 인터넷을 검색해 보니 주 영국 대한민국 대사관 홈페이지의 &lt;a href=&#34;http://gbr.mofa.go.kr/webmodule/htsboard/template/read/korboardread.jsp?typeID=15&amp;amp;boardid=9713&amp;amp;seqno=975945&#34;&gt;영국 운전면허증 교환안내&lt;/a&gt;에 영국 운전면허증 교환 요건 및 절차가 자세히 나와있다. 그러나 다음과 같은 이유(알고 나면 별것 아니지만 알기 전에는 어렵게 느껴지는 그런 것들)로 바로 진행하기가 어려웠다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 66</title>
      <link>http://ntalbs.github.io/2016/project-euler-066/</link>
      <pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-066/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;$x^2 – Dy^2 = 1$ 형태의 디오판토스 방정식 풀기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=66&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=66&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 65</title>
      <link>http://ntalbs.github.io/2016/project-euler-065/</link>
      <pubDate>Tue, 10 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-065/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;$e$의 100번째 연분수 확장 값의 분자 자릿수를 모두 더하면?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=65&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=65&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;$e$의 연분수를 꼴을 $[a_0; a_1, a_2, a_3, &amp;hellip;]$이라 했을 때, 100번째 연분수 확장 값을 계산하려면 $a_{99}$(100번째 항)부터 값을 계산해 올라가야 한다. 문제에서 $e$의 연분수 꼴이 $[2; 1,2,1, 1,4,1, 1,6,1, &amp;hellip;, 1,2k,1, &amp;hellip; ]$로 나타낼 수 있다고 되어 있으므로 $n$이 주어졌을 때 $a_{n-1}, a_{n-2}, &amp;hellip;, a_0$을 구하는 함수는 다음과 같이 만들 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>영국 통신비</title>
      <link>http://ntalbs.github.io/2016/telecom-expense/</link>
      <pubDate>Fri, 29 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/telecom-expense/</guid>
      <description>&lt;p&gt;거의 사무실과 집만 왔다갔다 한다. 전화를 거는 일은 별로 없고, 걸더라도 통화 시간이 짧다. 문자 메시지는 거의 사용하지 않는다. 사무실과 집에서는 와이파이를 마음껏 쓸 수 있다. 출퇴근 시간만 주의하면 데이터를 많이 사용할 일은 없다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 64</title>
      <link>http://ntalbs.github.io/2016/project-euler-064/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-064/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;제곱근을 연분수로 나타낼 때 반복 주기가 홀수인 경우 세기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=64&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=64&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>영어</title>
      <link>http://ntalbs.github.io/2016/english/</link>
      <pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/english/</guid>
      <description>&lt;p&gt;한국에서는 동기가 부족했다. 영어 공부를 시작했다가도 의욕이 금세 사그라졌다. 늘 &amp;lsquo;영어를 많이 사용할 수 있는 환경에 있으면 실력이 많이 늘 텐데&amp;hellip;&amp;rsquo; 푸념했다. 영국에 도착했을 때만 해도 기대가 컸다. 어려움이 있었지만, 휴대폰도 개통했고, 집도 구했고, 은행 계좌도 만들었고, 큰 아이 학교도 등록했다. 아이들 데리고 병원에도 갔었고, 회사도 다니고 있다. 집에서 식구들과 말할 때 빼고는 거의 영어를 사용해야 한다. 영어를 많이 사용할 수 있는 환경, 내가 항상 바랐던 환경에 처한 것이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 63</title>
      <link>http://ntalbs.github.io/2016/project-euler-063/</link>
      <pubDate>Thu, 14 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-063/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;$n$자리 숫자이면서 $n$제곱수도 되는 양의 정수는 모두 몇 개?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=63&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=63&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 62</title>
      <link>http://ntalbs.github.io/2016/project-euler-062/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-062/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;자릿수로 만든 순열 중에서 5개가 세제곱수인 가장 작은 숫자는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=62&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=62&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;처음 떠오른 생각은 이렇다. 숫자를 증가시키면서 그 수자 세제곱수인지 확인하고, 세제곱수라면 자릿수로 순열을 만들어 그 중 세제곱수인 것만 골라내서 다섯 개가 되는지 확인하는 방법을 생각할 수 있다. 그러나 이 방법은 쉽지도 않고 비효율적이다. 숫자의 대부분이 세제곱수가 아니고 세제곱수의 순열도 대부분 세제곱수가 아닐 것이기 때문이다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 61</title>
      <link>http://ntalbs.github.io/2016/project-euler-061/</link>
      <pubDate>Wed, 06 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-061/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;순환적인 성질을 갖는 4자리 다각수 여섯 개의 합&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id= 61&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem= 61&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;네 자리 다각수의 집합을 구한 다음 앞 두 자리를 키로 하여 맵을 만들어 놓으면 꼬리를 무는 수를 쉽게 찾을 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 60</title>
      <link>http://ntalbs.github.io/2016/project-euler-060/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-060/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;다섯 소수 중 어떤 두 개를 이어붙여도 소수가 되는 수 찾기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=60&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=60&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 59</title>
      <link>http://ntalbs.github.io/2016/project-euler-059/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-059/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;XOR 방식으로 암호화된 메시지 깨기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=59&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=59&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;암호화 키가 영어 소문자 세 개로 되어 있으므로, &lt;code&gt;aaa&lt;/code&gt;부터 &lt;code&gt;zzz&lt;/code&gt;까지 모두 시도해본다 해도 경우의 수는 $26^3=17,576$밖에 되지 않는다. 이 정도면 무차별 대입법으로 공략해도 충분할 것 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 58</title>
      <link>http://ntalbs.github.io/2016/project-euler-058/</link>
      <pubDate>Fri, 18 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-058/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;나선모양 격자의 대각선상에 있는 소수의 비율 추적하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=58&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=58&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-028/&#34;&gt;문제 28&lt;/a&gt;에서 나선모양 행렬의 대각선 요소를 구하는 공식을 유도했다. 그때는 나선모양이 시계 방향으로 돌았고 여기서는 나선모양이 반시계 방향으로 돌아 방향이 다르지만 문제를 푸는 데 영향을 끼치지는 않는다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 57</title>
      <link>http://ntalbs.github.io/2016/project-euler-057/</link>
      <pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-057/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;제곱근 2의 연분수꼴 살펴보기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=57&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=57&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;문제에 있는 $\sqrt 2$의 연분수꼴 수식은 다음과 같다.&lt;/p&gt;

&lt;div&gt;$$
\begin{aligned}
\sqrt 2 = 1 + \cfrac{1}{2 + \cfrac{1}{2 + \cfrac{1}{2 + \cfrac{1}{ \ddots }}}}
\end{aligned}
$$&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 56</title>
      <link>http://ntalbs.github.io/2016/project-euler-056/</link>
      <pubDate>Fri, 11 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-056/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;$a^b$ 형태의 자연수에 대해 자릿수 합의 최대값 구하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=56&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=56&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-016/&#34;&gt;문제 16&lt;/a&gt;에서 만든 &lt;code&gt;pow&lt;/code&gt; 함수를 이용하면 문제를 쉽게 풀 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 55</title>
      <link>http://ntalbs.github.io/2016/project-euler-055/</link>
      <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-055/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;10000 미만의 라이크렐 수 (Lychrel number) 세기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=55&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=55&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;숫자를 뒤집어서 더한 후 대칭수인지 확인해야 하므로 다음과 같이 숫자를 뒤집는 함수와 숫자가 대칭수인지 확인하는 함수를 미리 만들어 두면 문제를 푸는 데 도움이 될 것이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 54</title>
      <link>http://ntalbs.github.io/2016/project-euler-054/</link>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-054/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;포커 게임에서 이긴 회수 구하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=54&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=54&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문제를 푸는 데 수학적인 지식이나 통찰은 전혀 필요하지 않은 것으로 보였다. 그저 주어진 카드 패가 어떤 계급인지 판단하는 방법을 구현하고 계급에 따라 승패를 정해 1번 선수가 이긴 횟수를 구하기만 하면 되는 단순한 문제로 보였다. 이렇게 해도 답을 구하는 데는 전혀 문제가 없었지만, 마음에 들지 않았다. 패가 특정 계급인지 판단하는 여러 개의 함수와 연속된 조건문&amp;hellip; 더 좋은 방법이 없을까?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>영국 은행 계좌 만들기</title>
      <link>http://ntalbs.github.io/2016/opening-uk-bank-account/</link>
      <pubDate>Sun, 06 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/opening-uk-bank-account/</guid>
      <description>영국에 와서 제일 먼저 해야 하는 일 중 하나가 은행 계좌 만들기였다. 영국에 오기 전 이주 담당자가 Lloyds와 Nat West 두 은행을 소개해 주었다. 특히 Lloyds를 선택할 경우 계좌를 신속하게 만들어주는 절차가 있다고 하며 매니저 전화번호와 메일주소까지 알려주었다. 그래서 나처럼 이주하는 사람들을 위해 미리 준비된 절차가 있을 거라 기대했다.
런던에 도착한 후 열흘 정도가 지나서야 은행 매니저에게 연락할 수 있었다. 제일 급하고 중요했던 집 구하는 일에 온 신경을 쓰다 보니 여력이 없었다.</description>
    </item>
    
    <item>
      <title>Emacs: 최근 사용한 파일 목록</title>
      <link>http://ntalbs.github.io/2016/emacs-recent-files/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/emacs-recent-files/</guid>
      <description>&lt;p&gt;최근 사용한 파일 기능은 그리 자주 사용하는 편은 아니었다. 파일을 찾을 때 그 파일을 최근 열었는지 생각하기 보다는 직접 찾는 게 더 빠르다고 생각했다. IDE를 쓸 때는 소스 파일을 쉽게 찾을 수 있는 기능을 활용했다. 문서 작업을 할 때도 원하는 파일을 특정 디렉터리에서 빠르게 찾을 수 있었다. 아마도 문서 파일을 보관하는 디렉터리 구조도 복잡하지 않았고 파일도 많지 않았기 때문일 것이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 53</title>
      <link>http://ntalbs.github.io/2016/project-euler-053/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-053/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;$1 \le n \le 100$ 일때 $_nC_r$의 값이 1백만을 넘는 경우는 모두 몇 번?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=53&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=53&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;$r \le n$이므로 $n$, $r$의 범위는 각각 $1 \le n \le 100$, $1 \le r \le 100$이다. 모든 $n$, $r$ 조합에 대해 $_nC_r$을 구한다 해도 경우의 수는 $100 \times 100 = 10,000$이므로 금방 구할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 52</title>
      <link>http://ntalbs.github.io/2016/project-euler-052/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-052/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;2배, 3배, 4배, 5배, 6배의 결과도 같은 숫자로 이루어지는 가장 작은 수?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=52&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=52&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;어떤 두 수가 같은 숫자로 이루어져 있는지 비교하려면 두 수를 모두 자릿수로 분해한 다음 정렬해 결과가 같은지 확인하면 된다. &lt;code&gt;str&lt;/code&gt; 함수로 숫자를 문자열로 바꾼 다음 &lt;code&gt;sort&lt;/code&gt;로 정렬하면 각 자릿수가 정렬된 시퀀스를 얻을 수 있다. &lt;code&gt;comp&lt;/code&gt;로 &lt;code&gt;sort&lt;/code&gt;와 &lt;code&gt;str&lt;/code&gt;을 합성하면 인자를 문자열로 바꿔 정렬하는 함수를 만들 수 있다. 주어진 여러 개의 숫자가 모두 같은 숫자로 이루어져 있는지 확인하는 함수는 다음과 같이 쉽게 구현할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 51</title>
      <link>http://ntalbs.github.io/2016/project-euler-051/</link>
      <pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-051/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;일부 숫자를 치환했을 때 8개의 서로 다른 소수가 생기는 가장 작은 소수?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=51&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=51&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;문제를 분석해보면 다음과 같은 조건을 만족해야 함을 알 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;치환할 위치가 마지막 자리면 안 된다.&lt;/li&gt;
&lt;li&gt;치환할 자리는 세 자리여야 한다.&lt;/li&gt;
&lt;li&gt;치환할 숫자는 0, 1 또는 2여야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>영국에서의 첫 운전</title>
      <link>http://ntalbs.github.io/2016/first-driving-in-uk/</link>
      <pubDate>Sat, 20 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/first-driving-in-uk/</guid>
      <description>&lt;p&gt;지난 일요일에 중고차를 구입했다. 그러나 차를 구입했다고 바로 운전을 할 수 있는 게 아니었다. 일단 자동차 세금을 내야 운행이 가능하다. 집에 차를 세울 공간이 없어 공영 주차장도 등록해야 했다. 자동차 보험도 들어야 했다. 결국 자동차는 구입 즉시 아는 분 집에 주차해 놓을 수밖에 없었다. 닷새 동안 이 모든 일을 다 처리한 후에야 자동차를 운전할 수 있게 되었다. 영국에서 첫 운전을 하며 여러 가지 어려움이 있었다. 운전석에 앉아서 느낀 순서대로 써 보면 다음과 같다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>영국에 오기 전 알았으면 좋았을 것들</title>
      <link>http://ntalbs.github.io/2016/what-i-had-to-know-before-coming-to-uk/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/what-i-had-to-know-before-coming-to-uk/</guid>
      <description>&lt;p&gt;한국에서 짐을 쌀 때 정리할 시간도 부족했지만 그냥 처분하기에 아까운 생각도 들어 온갖 잡동사니를 가져왔다. 영국에서 어떻게든 활용할 수 있을 거라 생각했다. 그러나 가져오지 말았어야 할 처치 곤란한 세간이 많았다. 영국에 오기 전에 미리 알았더라면 이렇게 바리바리 싸가지고 오지 않았을 것이다. 싼 값에 처분하거나 아는 사람에게 공짜로 넘기는 편이 훨씬 나았을 것이다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 50</title>
      <link>http://ntalbs.github.io/2016/project-euler-050/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-050/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;1백만 이하의 소수 중 가장 길게 연속되는 소수의 합으로 표현되는 수는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=50&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=50&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 49</title>
      <link>http://ntalbs.github.io/2016/project-euler-049/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-049/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;세 항이 소수이면서 다른 수의 순열이 되는 4자리 숫자의 등차수열 찾기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=49&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=49&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;네 자리 소수에 대해서만 계산을 해보면 되므로, 무차별 대입법을 이용해도 답을 빠르게 찾아낼 수 있을 것 같다. 다음과 같은 도구가 있다면 문제를 쉽게 풀 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;자릿수가 네 자리인 소수 집합&lt;/li&gt;
&lt;li&gt;주어진 네 자리 소수의 순열을 구해 이 중 소수만 걸러내 리턴하는 함수&lt;/li&gt;
&lt;li&gt;주어진 시퀀스에서 등차수열을 찾아내는 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 48</title>
      <link>http://ntalbs.github.io/2016/project-euler-048/</link>
      <pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-048/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;$1^1 + 2^2 + 3^3 + &amp;hellip; + 1000^{1000}$의 마지막 10자리는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=48&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=48&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문제 역시 아주 큰 숫자를 다루는 문제지만, Java의 &lt;code&gt;BigInteger&lt;/code&gt;나 Clojure의 &lt;code&gt;BigInt&lt;/code&gt;를 쓰면 쉽게 풀 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 47</title>
      <link>http://ntalbs.github.io/2016/project-euler-047/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-047/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;서로 다른 네 개의 소인수를 갖는 수들이 처음으로 네 번 연속되는 경우는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=47&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=47&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;소인수의 개수를 구하는 함수가 있다면 문제를 쉽게 풀 수 있다. &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-003/&#34;&gt;문제 3&lt;/a&gt;에서 소인수 분해 함수를 구현했으므로, 소인수 개수를 구하는 함수는 다음과 같이 간단히 작성할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 46</title>
      <link>http://ntalbs.github.io/2016/project-euler-046/</link>
      <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2016/project-euler-046/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;(소수 + 2×제곱수)로 나타내지 못하는 가장 작은 홀수인 합성수는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=46&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=46&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;홀수인 합성수의 집합에서 (소수 + 2x제곱수) 집합을 뺀 차집합의 최소값을 구하면 된다. 다만 두 집합 모두 크기가 무한대이므로 적절할 상한을 주고 계산해야 한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>아마존 취업 후기 3</title>
      <link>http://ntalbs.github.io/2015/amazon-3/</link>
      <pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/amazon-3/</guid>
      <description>&lt;p&gt;영국 리크루터와 통화하기로 약속을 잡고 나니 몹시 긴장되었다. 예전에 H-1B가 나오지 않아 다른 나라로 지원하게 되면 면접을 새로 봐야 할 수도 있다는 내용이 있었기에, 면접을 다시 봐야 하는 줄 알았기 때문이다. 그리고 내가 영국 영어를 제대로 알아들을 수 있을지도 걱정되었다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>아마존 취업 후기 2</title>
      <link>http://ntalbs.github.io/2015/amazon-2/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/amazon-2/</guid>
      <description>&lt;p&gt;처음에는 아마존에 합격해 미국으로 간다는 생각만으로도 기대에 부풀었지만, 곧 현실과 직면했다. 연봉협상 말고도 비자 신청, 세무 상담, 이사 준비, 현지 집 구하기 등 할 일이 많았다. 이 모든 것을 영어로 진행해야 한다. 가장 큰 문제는 미국 취업 비자를 받는 것이었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>아마존 취업 후기 1</title>
      <link>http://ntalbs.github.io/2015/amazon-1/</link>
      <pubDate>Mon, 28 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/amazon-1/</guid>
      <description>&lt;p&gt;2014년 12월 초에 아마존 킨들팀에서 한국 개발자를 채용하러 서울에 왔었다. 아마존은 이후에도 2015년 6월(프라임), 2015년 11월(킨들&amp;amp;에코)에 서울에서 채용 이벤트를 열었다고 한다. 이 글은 어떻게 아마존에 취업하게 되었는지 간단히 정리한 것이다. 아마존이나 다른 외국 회사에 취업하는 데 도움이 되지는 않겠지만, 어떤 식으로 진행되는지 참고할 수는 있을 것이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>휴대폰이 없어 생긴 일</title>
      <link>http://ntalbs.github.io/2015/without-mobile-phone/</link>
      <pubDate>Thu, 24 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/without-mobile-phone/</guid>
      <description>&lt;p&gt;한국을 떠나며 인터넷과 휴대폰 서비스를 해지했다. 휴대폰을 해지하고 나니 그동안 얼마나 편하게 살았는지, 휴대폰이 얼마나 고마운 존재인지 절감하게 되었다. 영국에 도착해 휴대폰이 없어 난처한 상황을 여러 번 겪었다. 다음은 그 난처했던 상황 이야기다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 45</title>
      <link>http://ntalbs.github.io/2015/project-euler-045/</link>
      <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-045/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;오각수와 육각수도 되는, 40755 다음으로 큰 삼각수는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=45&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=45&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;육각수를 구하는 공식을 조금 변형해보면 다음과 같은 결과를 얻을 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 44</title>
      <link>http://ntalbs.github.io/2015/project-euler-044/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-044/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;합과 차도 모두 오각수인 두 오각수 차의 최소값은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=44&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=44&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;어떤 수가 오각수인지 빠르게 판단할 수 있다면 $i$와 $j$를 계속 늘려가며 $P_i$와 $P_j$를 구하고 그 합과 차 역시 오각수인 경우를 찾을 수 있다. $P_n ≡ x$로 놓고 근의 공식을 이용해 $n$에 대한 이차방정식을 풀면 다음과 같은 결과를 얻는다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs에서 £ 기호 입력하기</title>
      <link>http://ntalbs.github.io/2015/emacs-typing-pound-or-hash/</link>
      <pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-typing-pound-or-hash/</guid>
      <description>&lt;p&gt;최근 영국과 메일을 주고 받다 보니 영국 화폐 단위인 파운드 기호(£)를 입력하는 일이 잦아졌다. 처음에는 Mac OS X에서 제공하는 특수문자 입력 기능을 사용했지만 너무 불편했다. 영국 키보드로는 파운드 기호를 쉽게 입력할 수 있겠다 생각되어 시스템 설정에서 입력 소스를 British로 바꾸니 &lt;code&gt;Shift+3&lt;/code&gt;으로 파운드 기호를 쉽게 입력할 수 있었다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 43</title>
      <link>http://ntalbs.github.io/2015/project-euler-043/</link>
      <pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-043/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;부분열에 관련된 특이한 성질을 가진 모든 팬디지털 숫자의 합&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=43&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=43&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;언듯 보면 복잡해 보이지만 조건만 많을 뿐 아주 단순한 문제다. &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-032/&#34;&gt;문제 32&lt;/a&gt;, &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-041/&#34;&gt;문제 41&lt;/a&gt;에서 &lt;code&gt;clojure.contrib.combinatorics&lt;/code&gt;의 &lt;code&gt;permutations&lt;/code&gt;를 사용해 팬디지털 수를 만드는 방법을 살펴봤다. 이 문제에서도 0-9 팬디지털 수를 구해 문제에서 설명한 조건을 만족하는 수만 걸러낸 다음 그 합을 구하면 된다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 42</title>
      <link>http://ntalbs.github.io/2015/project-euler-042/</link>
      <pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-042/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;주어진 텍스트 파일에 들어있는 &amp;lsquo;삼각단어&amp;rsquo;의 개수는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=42&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=42&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;쉬운 문제다. 파일에 들어있는 단어 목록에서 단어값이 삼각수인 삼각단어의 수를 세기만 하면 된다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 41</title>
      <link>http://ntalbs.github.io/2015/project-euler-041/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-041/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;$n$자리 팬디지털 소수 중에서 가장 큰 수&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=41&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=41&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;두 가지 방법이 떠오른다. 하나는 &lt;code&gt;clojure.contrib.lazy-seqs&lt;/code&gt;의 &lt;code&gt;primes&lt;/code&gt;를 이용하는 방법이다. 가장 큰 팬디지털 수는 987654321이므로 이걸 상한으로 소수를 하나씩 조사해가며 팬디지털 수인지 확인해 가장 큰 수를 구하면 된다. 그러나 이 방법은 987654321보다 작은 수 중 가장 큰 소수에 도달할 때까지 확인을 해야 하므로 답을 빠르게 구하기는 어려워 보인다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 40</title>
      <link>http://ntalbs.github.io/2015/project-euler-040/</link>
      <pubDate>Sat, 24 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-040/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;어떤 무리수에서 소수점 $n$번째 자리 숫자 알아내기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=40&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=40&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문제를 푸는 데는 특별히 복잡한 알고리즘이 필요하지 않다. 그냥 문제에서 설명한 대로 소수점 아래 수에 대한 시퀀스를 만들고, 1번째, 10번째, &amp;hellip; , 1,000,000번째 요소를 구해 모두 곱하면 그만이다. Clojure로는 특히 이런 문제를 쉽게 풀 수 있는 것 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 39</title>
      <link>http://ntalbs.github.io/2015/project-euler-039/</link>
      <pubDate>Fri, 23 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-039/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;가장 많은 직각삼각형이 만들어지는 둘레(≤ 1000)의 길이는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=39&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=39&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;세 변의 길이가 자연수인 직삼각형을 가장 많이 만들 수 있는 둘레 길이를 찾는 문제다. &lt;a href=&#34;https://en.wikipedia.org/wiki/Pythagorean_triple#Generating_a_triple&#34;&gt;Pythagorean triple &amp;gt; Generating a triple&lt;/a&gt;에 유클리드 공식을 사용해 피타고라스 수를 구하는 방법이 나와있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 38</title>
      <link>http://ntalbs.github.io/2015/project-euler-038/</link>
      <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-038/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;어떤 수에 (1, 2, &amp;hellip; )를 곱해서 이어붙여 얻을 수 있는 가장 큰 1 ~ 9 팬디지털 숫자&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=38&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=38&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(1, 2, &amp;hellip;)를 곱해서 이어붙일 어떤 수는 네 자리 이하의 수여야 한다. n이 1보다 커야 하므로, 어떤 수가 다섯 자리라면 (1, 2)를 곱해 이어붙일 경우 아홉 자리를 넘어버리기 때문이다. 따라서 네 자리 수 중 가장 큰 9999부터 숫자를 줄여가며 답을 찾으면 문제를 쉽게 풀 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 37</title>
      <link>http://ntalbs.github.io/2015/project-euler-037/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-037/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;왼쪽이나 오른쪽에서 한 자리씩 없애가도 여전히 소수인 수의 합은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=37&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=37&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;어떤 수를 왼쪽이나 오른쪽에서 한 자리 없앤 수를 구하는 함수가 있다면 이 문제를 풀 때 도움이 될 것이다. &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-035/&#34;&gt;문제 35&lt;/a&gt;에서 순환수를 만들 때 사용했던 방법을 활용하면 이 함수를 쉽게 구현할 수 있다. 순환수를 구할 때는 숫자를 잘라 다시 붙여야 했지만 여기서는 그냥 잘라내기만 하면 되므로 오히려 더 간단하다고 할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 36</title>
      <link>http://ntalbs.github.io/2015/project-euler-036/</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-036/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;10진법과 2진법으로 모두 대칭수인 1,000,000 이하 숫자의 합&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=36&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=36&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;어떤 수가 대칭인지 확인하는 방법은 이미 &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-004/&#34;&gt;문제 4&lt;/a&gt;에서 설명했다. 이진수는 어차피 문자열로 표현해야 하므로 여기서는 다음과 같이 문자열을 인자로 받아 대칭인지 확인하는 함수를 만들어 두는 것이 좋겠다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 35</title>
      <link>http://ntalbs.github.io/2015/project-euler-035/</link>
      <pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-035/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;백만 이하인 circular prime 개수 구하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=35&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=35&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;백만 이하의 소수는 &lt;code&gt;clojure.contrib.lazy-seqs&lt;/code&gt;의 &lt;code&gt;primes&lt;/code&gt;를 이용해 구할 수 있다. &lt;code&gt;digits&lt;/code&gt;를 이용해 숫자의 시퀀스를 만들고 &lt;code&gt;cycle&lt;/code&gt;과 &lt;code&gt;partition&lt;/code&gt;을 이용하면 순환수(circular number)도 쉽게 구할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 34</title>
      <link>http://ntalbs.github.io/2015/project-euler-034/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-034/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;각 자릿수의 팩토리얼을 더했을 때 자기 자신이 되는 수들의 합은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=34&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=34&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;먼저 각 자릿수의 팩토리얼을 더한 값을 구하는 함수는 다음과 같이 작성할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 33</title>
      <link>http://ntalbs.github.io/2015/project-euler-033/</link>
      <pubDate>Sun, 04 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-033/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;이상한 방법으로 약분할 수 있는 분수 찾기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=33&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=33&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;값이 1보다 작고 분모와 분자가 모두 두 자릿수인 분수는 모두 4005개다. 이 정도라면 그냥 루프를 돌려 확인해도 금방 답을 찾을 수 있다. 이상한 방법으로 약분하는 함수는 다음과 같이 작성할 수 있다. &lt;code&gt;n&lt;/code&gt;은 numerator, 즉 분자를 나타내며, &lt;code&gt;d&lt;/code&gt;는 denominator, 즉 분모를 나타낸다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 32</title>
      <link>http://ntalbs.github.io/2015/project-euler-032/</link>
      <pubDate>Sat, 03 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-032/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;1~9 팬디지털 곱셈식을 만들 수 있는 모든 수의 합&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=32&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=32&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;$a \times b = c$가 1-9 팬디지털이 되려면 다음과 같은 이유로 $c$가 네 자리 숫자여야 한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 31</title>
      <link>http://ntalbs.github.io/2015/project-euler-031/</link>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-031/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;영국 화폐 액면가를 조합하는 방법의 수&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=31&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=31&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;재귀를 이용하면 쉽게 풀 수 있다. 동전의 종류를 숫자 1, 2, &amp;hellip;로 표현하면 문제를 풀 때 도움이 된다. 따라서 다음과 같이 종류 숫자를 인자로 주면 동전 값을 리턴하는 함수를 만들 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 30</title>
      <link>http://ntalbs.github.io/2015/project-euler-030/</link>
      <pubDate>Fri, 25 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-030/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;각 자리 숫자를 5제곱해서 더했을 때 자기 자신이 되는 수들의 합은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=30&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=30&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문제는 무차별 대입법으로 풀 수 있다. 다만 루프를 무한히 반복하지 않으려면 상한을 알아야 한다. 6자리 수 중 가장 큰 정수는 999,999다. 이 수의 각 자리 숫자를 5제곱해 더하면 354,294가 된다. 즉 6자리 수 중 가장 큰 정수의 각 자릿수를 5제곱해 더해도 354,294보다 큰 수는 못 만든다는 뜻이다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs를 쓰는 이유?</title>
      <link>http://ntalbs.github.io/2015/why-emacs/</link>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/why-emacs/</guid>
      <description>&lt;p&gt;Emacs를 쓰는 이유가 뭘까? 현대적 에디터와 비교해보면 투박하기 짝이 없는 이 구닥다리 에디터를 여지껏 사용하는 이유가 뭘까? 한참을 생각해 보았지만 명확한 이유를 설명할 수 없다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 29</title>
      <link>http://ntalbs.github.io/2015/project-euler-029/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-029/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;$2 \le a \le 100$ 이고 $2 \le b \le 100$인 $a$, $b$로 만들 수 있는 $a^b$의 개수&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=29&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=29&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;$a$가 대략 100가지, $b$가 대략 100가지이므로 $a^b$는 대략 10,000가지 수가 나올 것이다. 여기서 중복을 제거하면 답을 구할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 28</title>
      <link>http://ntalbs.github.io/2015/project-euler-028/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-028/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;1001×1001 나선모양 행렬에서 대각선 원소의 합은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=28&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=28&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;대각선 원소에 대한 공식을 구하면 쉽게 문제를 풀 수 있다. 첫 번째 링의 요소는 다음과 같다.&lt;/p&gt;

&lt;div&gt;$$
\begin{matrix}
7 &amp; 8 &amp; 9 \\
6 &amp;   &amp; 2 \\
5 &amp; 4 &amp; 3
\end{matrix}
$$&lt;/div&gt;

&lt;p&gt;여기서 대각선 요소를 작은 수부터 나열하면 3, 4, 7, 9다. 두 번째 링의 요소는 다음과 같다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 27</title>
      <link>http://ntalbs.github.io/2015/project-euler-027/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-027/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;연속되는 $n$에 대해 가장 많은 소수를 만들어내는 2차식 구하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=27&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=27&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;$n^2+an+b$란 식이 주어졌고 $a, b$의 범위가 $|a|&amp;lt;1000, |b|&amp;lt;1000$ 으로 주어졌으므로, 무식하게 루프를 돌리는 방법으로 풀이를 시도해 볼 수 있다. 대략 4백만 가지의 $(a, b)$ 조합에 대해 얼마나 많은 소수를 만들 수 있는지 확인해야 한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 26</title>
      <link>http://ntalbs.github.io/2015/project-euler-026/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-026/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;1000 이하의 $d$ 중에서 $1/d$ 이 가장 긴 순환마디를 갖는 수는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=26&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=26&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;$1 \over d$의 순환마디를 구하려면 어떻게 해야 할까? 이 문제를 풀려면 초등학교때 배웠던 나눗셈 절차를 잘 분석하고 이를 수행하는 프로그램을 만들어야 한다. 예를 들어 $\frac{1}{54}$를 구하는 과정을 자세히 살펴보자.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>if (cond == true) return true</title>
      <link>http://ntalbs.github.io/2015/if-true-return-true/</link>
      <pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/if-true-return-true/</guid>
      <description>&lt;p&gt;회사에서 코드 리뷰를 할 때 다음과 같은 패턴의 코드가 자주 눈에 띈다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;if (condition == true) {
  return true;
} else {
  return false;
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>에디터 입력기 만들기</title>
      <link>http://ntalbs.github.io/2015/editor-ime/</link>
      <pubDate>Tue, 28 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/editor-ime/</guid>
      <description>&lt;p&gt;&lt;code&gt;contenteditable&lt;/code&gt;을 사용하지 않고 에디터를 개발하기로 했다면 브라우저에서 키 입력 이벤트를 받아 처리할 IME(Input Method Editor)를 만들어야 한다. 텍스트 필드나 &lt;code&gt;div&lt;/code&gt;에 텍스트를 입력할 수 있게 한 다음 여기서 키 이벤트를 받아 처리하는 방식으로 구현한다. &lt;code&gt;div&lt;/code&gt;에 텍스트를 입력하려면 &lt;code&gt;contenteditable&lt;/code&gt;을 써야 하지만, 에디터 창에 &lt;code&gt;contenteditable&lt;/code&gt;을 써서 편집하는 것과는 다르다. 개발할 때는 입력을 제대로 처리하는 지 확인하기 쉽게 IME를 표시하기도 하지만, 나중에는 IME를 보이지 않게 처리해 에디터 화면에 텍스트가 직접 입력되는 것처럼 보이게 한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 25</title>
      <link>http://ntalbs.github.io/2015/project-euler-025/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-025/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;피보나치 수열에서 처음으로 1000자리가 되는 항은 몇 번째?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=25&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=25&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;피보나치 수열을 구하는 방법은 &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-002/&#34;&gt;프로젝트 오일러 2번 풀이&lt;/a&gt;에서 설명했다. 2번에서는 4백만 이하의 항을 다루었지만 이 문제에서는 1,000자리가 되는 항을 구해야 하므로 피보나치 수열을 계산할 때 &lt;code&gt;+&lt;/code&gt; 대신 자릿수에 관계 없이 계산할 수 있는 &lt;code&gt;+&#39;&lt;/code&gt;를 사용해야 한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>순열 구하기</title>
      <link>http://ntalbs.github.io/2015/permutations/</link>
      <pubDate>Fri, 17 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/permutations/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-024/&#34;&gt;프로젝트 오일러 24번&lt;/a&gt;은 &lt;code&gt;clojure.math.combinatorics&lt;/code&gt;에 있는 &lt;code&gt;nth-permutation&lt;/code&gt;을 이용해 문제를 너무 쉽게 풀었다. 그런데 순열을 직접 구하려면 어떻게 해야 할까?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 24</title>
      <link>http://ntalbs.github.io/2015/project-euler-024/</link>
      <pubDate>Fri, 17 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-024/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;0, 1, 2, 3, 4, 5, 6, 7, 8, 9로 만들 수 있는 1,000,000번째 사전식 순열은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=24&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=24&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;clojure.math.combinatorics&lt;/code&gt;의 &lt;code&gt;nth-permutation&lt;/code&gt; 함수를 이용하면 바로 답을 구할 수 있다. 다만 인덱스가 0부터 시작한다는 점에 주의해야 한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>정수 자릿수 구하기</title>
      <link>http://ntalbs.github.io/2015/number-of-digits/</link>
      <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/number-of-digits/</guid>
      <description>&lt;p&gt;어떤 정수가 몇 자리 수인지 어떻게 판단할 수 있을까? 몇 가지 방법이 떠오른다. 사람에 따라 다르겠지만 내게 가장 먼저 떠오른 방법은 로그 함수를 사용하는 것이었다. 정수를 문자열로 바꾼 다음 문자열의 길이를 구하는 방법도 생각할 수 있다. 10으로 몇 번 나눌 수 있는지 확인하는 방법도 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>블로그에 Progress Bar 추가하기</title>
      <link>http://ntalbs.github.io/2015/progress-bar/</link>
      <pubDate>Thu, 02 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/progress-bar/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.weirdx.io&#34;&gt;이상한 모임&lt;/a&gt; 사이트에서 글을 읽을 때 상단에 프로그레스 바(progress bar)가 표시되는 것을 발견했다. 스크롤해서 글을 읽어감에 따라 글을 얼마나 읽었는지, 얼마나 남았는지를 쉽게 알 수 있어 매우 마음에 들었다. 내 블로그에도 이걸 적용하면 좋겠다는 생각이 들어 툭탁툭탁 만들어 봤다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 23</title>
      <link>http://ntalbs.github.io/2015/project-euler-023/</link>
      <pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-023/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;두 초과수의 합으로 나타낼 수 없는 모든 양의 정수의 합은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=23&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=23&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;초과수인지 판단하려면 진약수의 합을 알아야 한다. &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-021/&#34;&gt;문제 21&lt;/a&gt;에서 구현한 진약수의 합을 구하는 함수를 이용하면 다음과 같이 주어진 수가 초과수인지 판단하는 함수를 간단히 구현할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>에디터 문서 모델</title>
      <link>http://ntalbs.github.io/2015/editor-doc-model/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/editor-doc-model/</guid>
      <description>&lt;p&gt;복잡한 소프트웨어를 만들 때 여러 번의 갈림길에 서게 된다. 나중에는 쉽게 알 수 있는 사실이라도 선택할 당시에는 명확하지 않아 어느 쪽이 옳은지 판단하기가 쉽지 않은 경우가 많다. 에디터에서 &lt;strong&gt;문서 모델&lt;/strong&gt;을 설계할 때도 마찬가지다. 문서 모델은 편집하는 문서를 어떤 구조로 저장하고 조작할지를 결정하는 에디터의 핵심 데이터 구조다. 문서 모델의 구조에 따라 이후 개발할 편집 기능의 구현 방향이 갈릴 것이다. 문서 모델이 잘못되어 있다면 기능 구현은 매우 피곤하고 힘든 과정이 될 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 22</title>
      <link>http://ntalbs.github.io/2015/project-euler-022/</link>
      <pubDate>Sat, 20 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-022/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;영문 이름 점수 합계 구하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=22&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=22&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;수학적 사고나 특별한 기교가 필요한 문제는 아니다. 그냥 문제에서 설명한 대로 처리하면 답을 얻을 수 있다. &lt;code&gt;names.txt&lt;/code&gt; 파일을 열어보면 다음과 같이 이름이 따옴표로 묶여 있고 각 이름 사이에는 쉼표가 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 21</title>
      <link>http://ntalbs.github.io/2015/project-euler-021/</link>
      <pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-021/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;10000 이하 모든 친화수(우애수)의 합은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=21&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=21&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;어떤 수가 친화수인지 판단하는 함수가 있다면 1부터 10,000까지의 수 중에서 친화수만 &lt;code&gt;filter&lt;/code&gt;해 더하면 된다. 어떤 수가 친화수인지 판단하는 함수를 구현하려면 몇 가지 보조 함수가 필요하다. 자신을 제외한 약수를 진약수(proper divisor)라 하는데, 진약수의 합 $d(n)$을 구하는 방법에 따라 풀이가 갈린다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs와 Vim</title>
      <link>http://ntalbs.github.io/2015/emacs-and-vim/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-and-vim/</guid>
      <description>&lt;p&gt;프로그래머 중에는 자기가 사용하는 에디터가 최고라 주장하는 사람들이 꽤 있다. 배우기 어려운 에디터일수록 그런 경향이 큰 것 같다. 막강한 기능을 자랑하지만 배우기 힘든 에디터의 대표를 꼽는다면 단연 Emacs와 Vim일 것이다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>에디터 우월성 계층</title>
      <link>http://ntalbs.github.io/2015/editor-hierarchy/</link>
      <pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/editor-hierarchy/</guid>
      <description>&lt;p&gt;프로그래머가 사용하는 텍스트 에디터 우월성 계층을 그려보면 아래 그림과 같지 않을까? Emacs와 Vim은 서로 최고라고 주장한다. 물론 이 두 에디터 사용자는 다른 에디터를 거들떠 보지도 않을 것이다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>if, cond, condp, case</title>
      <link>http://ntalbs.github.io/2015/if-cond-condp-case/</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/if-cond-condp-case/</guid>
      <description>&lt;p&gt;흔히 접하는 프로그래밍 언어에는 &lt;code&gt;if&lt;/code&gt;~&lt;code&gt;else if&lt;/code&gt;가 연달아 나온다고 해서 코드 모양이 이상해지지는 않는다. 다음 Java 코드와 같이 그냥 순서대로 쓰면 되고 코드를 읽는 것도 어렵지 않다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Guava Cache 제대로 사용하기</title>
      <link>http://ntalbs.github.io/2015/loading-cache/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/loading-cache/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/guava-libraries/wiki/CachesExplained&#34;&gt;Google Guava Cache&lt;/a&gt;는 캐시를 쉽게 사용할 수 있도록 다양한 기능을 제공한다. 간단한 코드로 캐시 크기, 캐시 시간, 데이터 로딩 방법, 데이터 리프레시 방법 등을 제어할 수 있다. 회사에서도 성능 향상을 위해 Guava 캐시가 널리 사용하고 있는데, 최근 캐시 관련 코드를 보다가 이상한 점을 발견했다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 20</title>
      <link>http://ntalbs.github.io/2015/project-euler-020/</link>
      <pubDate>Wed, 20 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-020/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;$100!$ 의 자릿수를 모두 더하면?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=20&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=20&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;100!은 150자리가 넘는 매우 큰 수라 기본 데이터 타입으로는 이 문제를 해결할 수 없다. 물론 &lt;code&gt;BigInt&lt;/code&gt;를 사용하면 아주 쉽게 문제를 풀 수 있다. &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-016/&#34;&gt;문제 16&lt;/a&gt;, &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-013/&#34;&gt;문제 13&lt;/a&gt;에서 썼던 방법을 응용하면 &lt;code&gt;BigInt&lt;/code&gt;를 사용하지 않고 문제를 풀 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 19</title>
      <link>http://ntalbs.github.io/2015/project-euler-019/</link>
      <pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-019/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;20세기에서, 매월 1일이 일요일인 경우는 몇 번?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=19&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=19&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Java에서 제공하는 &lt;code&gt;Calendar&lt;/code&gt;를 사용하면 쉽게 답을 구할 수 있다. 그러나 &lt;code&gt;Calender&lt;/code&gt;는 가변객체(mutable object)인데다 클래스도 잘못 설계되어 있어 코드 모양이 어그러진다. Java 8부터는 거지 같은 &lt;code&gt;Calendar&lt;/code&gt; 대신 &lt;code&gt;LocalDate&lt;/code&gt;를 사용할 수 있다. &lt;code&gt;LocalDate&lt;/code&gt;는 값 객체로 Clojure에서 사용해도 코드가 어그러지지 않는다. 조금 더 생각하면 라이브러리의 도움을 받지 않고도 풀 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 18</title>
      <link>http://ntalbs.github.io/2015/project-euler-018/</link>
      <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-018/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;삼각형을 따라 내려가면서 합이 최대가 되는 경로 찾기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=18&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=18&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;문제를 언듯 보면 합이 최대가 되는 경로를 찾아야 할 것 같지만, 명시적으로 경로를 구하지 않더라도 경로의 합이 최대가 되는 값을 찾을 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>과도한 로깅</title>
      <link>http://ntalbs.github.io/2015/excessive-logging/</link>
      <pubDate>Thu, 07 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/excessive-logging/</guid>
      <description>&lt;blockquote class=&#34;blockquote-reverse&#34;&gt;과유불급(過猶不及)
정도를 지나침은 미치지 못함과 같다
- 논어(論語) 선진편(先進篇)&lt;/blockquote&gt;

&lt;p&gt;방문자가 매우 많은 사이트에서 애플리케이션을 배포하는 작업은 부담이 크다. 다행히 애플리케이션 서버를 여러 대 두기 때문에 서버 한 대가 잘못되더라도 사이트 전면 장애가 발생하지는 않는다. 새로운 코드를 배포할 때는 항상 서버 한 대에 먼저 배포해 놓고 일정 시간 동안 모니터링 한다. 문제가 없는 경우에는 전체 서버로 배포하고, 로그에 예외나 에러가 표시되면 즉시 롤백한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tail은 이제 그만</title>
      <link>http://ntalbs.github.io/2015/stop-using-tail/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/stop-using-tail/</guid>
      <description>&lt;p&gt;서버에서 로그 파일을 모니터링 할 때 보통 &lt;code&gt;tail -f&lt;/code&gt;를 사용한다. 그런데 최근 더 좋은 방법을 알게 되었다. 바로 &lt;code&gt;less +F&lt;/code&gt;를 사용하는 것이다. &lt;code&gt;tail -f&lt;/code&gt;를 사용할 때 파일에서 어떤 내용을 찾고 싶을 때는 흔히 다음 두 방법을 사용한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 17</title>
      <link>http://ntalbs.github.io/2015/project-euler-017/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-017/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;1부터 1000까지 영어로 썼을 때 사용된 글자의 개수는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=17&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=17&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;별로 어려운 문제는 아니다. 다음과 같은 절차로 풀 수 있다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;숫자를 입력하면 그 수에 대한 영어 문자열을 리턴하는 함수를 작성한 다음&lt;/li&gt;
&lt;li&gt;이 함수를 이용해 1~1000을 영어 문자열로 매핑&lt;/li&gt;
&lt;li&gt;문자열을 모두 연결해 문자열에서 공백과 하이픈(&amp;lsquo;-&amp;rsquo;)을 제거&lt;/li&gt;
&lt;li&gt;3에서 구한 문자열의 길이 계산&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Sitemap 생성기</title>
      <link>http://ntalbs.github.io/2015/sitemap-generator/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/sitemap-generator/</guid>
      <description>&lt;p&gt;블로그를 정적 사이트 생성기로 만들어 GitHup에 처음 올렸을 때가 생각난다. 그전에 사용했던 티스토리나 블로거에서는 글을 올리고 별다른 작업을 하지 않아도 일정 시간이 지난 후 구글에서 검색이 되었다. 그래서 GitHup 페이지로 블로그를 옮긴 다음에도 언제쯤 구글에서 검색이 될까 마냥 기다렸다. 나중에 알고보니 그렇게 기다리기만 한다고 되는게 아니었다. 구글이 내 블로그를 빨리 색인하도록 &lt;code&gt;sitemap.xml&lt;/code&gt;을 만들어 &lt;a href=&#34;https://www.google.com/webmasters/&#34;&gt;구글 웹마스터 도구&lt;/a&gt;에 제출해야 했다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 16</title>
      <link>http://ntalbs.github.io/2015/project-euler-016/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-016/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;$2^{1000}$의 각 자릿수를 모두 더하면?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=16&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=16&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;$2^{1000}$은 300자리가 넘는 매우 큰 수다. &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;과 같은 기본 데이터 타입에는 이렇게 큰 수를 담을 수 없다. &lt;code&gt;double&lt;/code&gt;은 $10^{308}$ 이상의 매우 큰 수를 표현할 수 있지만 유효자릿수가 15~17자리여서 $2^{1000}$의 모든 자릿수를 담을 수 없다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>statement와 expression</title>
      <link>http://ntalbs.github.io/2015/statement-expresssion/</link>
      <pubDate>Tue, 07 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/statement-expresssion/</guid>
      <description>&lt;p&gt;언젠가 동료 한 명이 &amp;lsquo;statement와 expression의 차이가 뭔지 아냐?&amp;lsquo;고 물어본 적이 있다. 프로그래밍 책에서 자주 접했던 용어지만 명확히 답할 수 없었다. statement는 명령문이고 expression은 표현식인데&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 15</title>
      <link>http://ntalbs.github.io/2015/project-euler-015/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-015/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;20×20 격자의 좌상단에서 우하단으로 가는 경로의 수?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=15&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=15&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://projecteuler.net/project/images/p015.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;격자에서 오른쪽으로 이동하는 경로를 &lt;code&gt;r&lt;/code&gt;(right), 아래쪽으로 이동하는 경로를 &lt;code&gt;d&lt;/code&gt;(down)라 하면 2x2 격자의 좌상단에서 우하단으로 가는 경로는 다음과 같은 식으로 표현할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 14</title>
      <link>http://ntalbs.github.io/2015/project-euler-014/</link>
      <pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-014/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;백만 이하로 시작하는 우박수 중 가장 긴 과정을 거치는 것은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=14&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=14&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;주어진 양의 정수 n에 대한 우박수열을 구하는 함수를 만든 다음, 1백만까지 우박수열을 구하면서 수열의 길이가 가장 길어지는 n을 구하면 된다. 우박수열을 구하는 함수는 다음과 같이 간단히 작성할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs: 여러 파일 안의 텍스트 찾기/바꾸기</title>
      <link>http://ntalbs.github.io/2015/emacs-find-replace-on-multiple-files/</link>
      <pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-find-replace-on-multiple-files/</guid>
      <description>&lt;p&gt;hexo-math 플러그인에서 사용해 수식을 표현하는데, 예전에는 &lt;code&gt;{% raw %}{% math-block %}...{% endmath-block %}{% endraw %}&lt;/code&gt;로 수식 블록을 표시했지만 Hexo 3.0에서는 이 부분이 깨졌다. 결국 &lt;code&gt;{% raw %}{% math_block %}...{% endmath_block %}{% endraw %}&lt;/code&gt;를 사용하도록 hexo-math가 수정되었다. 이에 따라 블로그의 모든 글에서 &lt;code&gt;math-block&lt;/code&gt;을 사용하는 부분을 찾아 &lt;code&gt;math_block&lt;/code&gt;으로 바꿔줘야 했다. Emacs를 사용하면서 버퍼 안에서 찾기/바꾸기는 많이 해봐 익숙했지만 여러 파일에 대해 찾기/바꾸기를 해본 적은 없었다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hexo: 3.0 업그레이드</title>
      <link>http://ntalbs.github.io/2015/hexo-upgrade/</link>
      <pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/hexo-upgrade/</guid>
      <description>&lt;p&gt;정적 사이트 생성기로 &lt;a href=&#34;http://hexo.io&#34;&gt;Hexo&lt;/a&gt;를 사용하고 있는데, 최근 버전 3.0이 나왔다. 사용하는 소프트웨어를 항상 최신 버전으로 유지하고자 하는 마음 때문에 업그레이드 했는데, 블로그가 아예 뜨지도 않는 난감한 상황이 발생했다. 온갖 삽질 끝에 블로그를 제대로 뜨게 하는 데 며칠이나 허비했다. &lt;a href=&#34;https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0&#34;&gt;Breaking Changes in Hexo 3.0&lt;/a&gt;에서의 Breaking이 기존 것을 다 깨먹는다는 뜻이었나 싶을 정도였다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 13</title>
      <link>http://ntalbs.github.io/2015/project-euler-013/</link>
      <pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-013/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;50자리 숫자 100개를 더한 값의 첫 10자리 구하기&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=13&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=13&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Long.MAX_VALUE&lt;/code&gt;는 9223372036854775807로 20자리 수를 표현할 수 있다. 문제에서 나오는 숫자는 50자리므로 &lt;code&gt;Long&lt;/code&gt;의 표현 범위를 벗어난다. 이런 수를 100개 더하려면&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 12</title>
      <link>http://ntalbs.github.io/2015/project-euler-012/</link>
      <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-012/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;500개 이상의 약수를 갖는 가장 작은 삼각수는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=12&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=12&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;삼각수의 시퀀스를 만들어 앞에서부터 하나씩 약수의 개수를 조사하면 될 것 같다. &lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-001/&#34;&gt;문제 1&lt;/a&gt;에서 1부터 n까지 정수 합을 구하는 공식을 살펴봤다. n번째 삼각수는 1부터 n까지 합이므로 공식을 이용해 다음과 같이 n번째 삼각수를 구하는 함수를 만들 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>국어 교육에 대해</title>
      <link>http://ntalbs.github.io/2015/thought-on-korean-education/</link>
      <pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/thought-on-korean-education/</guid>
      <description>&lt;p&gt;출근길 버스 옆자리에 앉은 사람이 공무원 시험 교재를 보며 공부하고 있었다. 곁눈으로 살펴봤는데 &amp;lsquo;반어법이 어쩌구 저쩌구&amp;hellip;&amp;rsquo; 하는 내용이 있는 걸로 봐서 국어 교재인 듯 했다. 국어 교재를 보니 고등학교 때 국어 때문에 짜증났던 생각이 났다. 한편으로는 더 이상 저런 걸 안 봐도 된다는 생각에 안도감을 느꼈지만, 다른 한편으로는 아직도 국어 공부를 저런 식으로 해야 하는 건가 하는 생각에 마음이 불편해졌다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 11</title>
      <link>http://ntalbs.github.io/2015/project-euler-011/</link>
      <pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-011/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;20×20 격자에서 연속된 네 숫자의 곱 중 최대값?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=11&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=11&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-008/&#34;&gt;문제 8&lt;/a&gt;에서 살펴봤듯이 &lt;code&gt;partition&lt;/code&gt; 함수를 사용하면 연속된 숫자를 네 개씩 묶어낼 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 10</title>
      <link>http://ntalbs.github.io/2015/project-euler-010/</link>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-010/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;이백만 이하 소수의 합은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=10&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=10&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://ntalbs.github.io/2015/project-euler-007/&#34;&gt;문제 7&lt;/a&gt;에서 어떤 수가 소수인지 판별하는 함수와 Clojure 라이브버리로 제공되는 소수의 지연 시퀀스를 살펴봤다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 9</title>
      <link>http://ntalbs.github.io/2015/project-euler-009/</link>
      <pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-009/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;$a + b + c = 1000$ 이 되는 피타고라스 수?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=9&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=9&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;피타고라스 수란 $a^2 + b^2 = c^2$을 만족하는 세 자연수 쌍 $(a, b, c)$를 말한다. $(3, 4, 5), (5, 12, 13)$ 등이 잘 알려진 피타고라스 수다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs: 빈 줄 지우기</title>
      <link>http://ntalbs.github.io/2015/emacs-removing-blank-lines/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-removing-blank-lines/</guid>
      <description>&lt;p&gt;편집중인 버퍼에서 빈 줄을 모두 지우고 싶으면 어떻게 해야 할까? 코드를 작성할 때는 이런 경우가 거의 없지만 다른 파일을 편집할 때는 빈 줄을 모두 삭제해야 하는 경우가 종종 생긴다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 8</title>
      <link>http://ntalbs.github.io/2015/project-euler-008/</link>
      <pubDate>Wed, 25 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-008/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;1000자리 숫자 안에서 이어지는 5자리 숫자의 곱 중 최대값은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=8&#34;&gt;[국어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1,000자리 숫자라고 하지만 1,000개의 숫자 리스트로 보는 편이 문제를 풀기에 더 좋을 것 같다. Clojure에서는 문자열도 시퀀스로 다룰 수 있으므로 &lt;code&gt;bigint&lt;/code&gt;를 쓰기 보다는 문자열로 만들어 작업하는 게 더 편하다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 7</title>
      <link>http://ntalbs.github.io/2015/project-euler-007/</link>
      <pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-007/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;10001번째의 소수?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=7&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=7&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&#34;&gt;에라토스테네스 체(Sieve of Eratosthenes)&lt;/a&gt;를 이용하면 소수 목록을 구할 수 있지만, 이 문제의 경우 체의 범위를 어디까지 해야 할지가 애매하다. 대충 50,000 정도까지 해보고 안 되면 다시 100,000 정도까지 해보는 식으로 범위를 늘려가며 문제를 풀 수도 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java REPL</title>
      <link>http://ntalbs.github.io/2015/java-repl/</link>
      <pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/java-repl/</guid>
      <description>&lt;p&gt;코드를 작성하다 보면 작은 코드 조각을 간단히 테스트해보고 싶을 때가 자주 생긴다. 간단한 계산이 필요할 수도 있고 특정 함수를 호출했을 때의 결과를 확인하고 싶을 수도 있다. 코드가 어떻게 동작하는지 간단히 확인해보고 싶을 수도 있다. REPL이 있다면 이런 궁금한 점을 즉시 확인할 수 있다. 그냥 REPL에서 코드를 입력하고 결과를 확인하면 된다. Clojure나 Scala는 REPL을 제공한다. Ruby나 Python 같은 언어도 REPL을 제공한다. JavaScript도 브라우저 콘솔이나 node.js를 REPL로 사용할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs: 행 연결</title>
      <link>http://ntalbs.github.io/2015/emacs-joining-lines/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-joining-lines/</guid>
      <description>&lt;p&gt;코드를 편집하다 보면 여러 줄을 한 줄로 합치고 싶을 때가 종종 생긴다. 예를 들어 다음과 같은 코드가 있다고 하자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;func(arg1,
     arg2,
     arg3);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이걸 다음과 같이 바꾸고 싶다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;func(arg1, arg2, arg3);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs: Sublime Text 데모 편집 흉내</title>
      <link>http://ntalbs.github.io/2015/emacs-mimic-sublime-text-demo/</link>
      <pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-mimic-sublime-text-demo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text 에디터&lt;/a&gt; 홈페이지에 있는 데모 화면을 보고 감탄했던 적이 있다. 특히 데모 2/6에 감탄해 Emacs에서 비슷하게 해보려 했지만 성공하지 못했다. 그동안 에디터가 많이 발전했음을 느끼며 주 사용 에디터를 Sublime Text로 바꿔볼까 생각했다. 사용해보고 마음에 들면 기꺼이 정품을 구입할 생각이었다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 6</title>
      <link>http://ntalbs.github.io/2015/project-euler-006/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-006/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;1부터 100까지 &amp;ldquo;제곱의 합&amp;rdquo;과 &amp;ldquo;합의 제곱&amp;rdquo;의 차는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=6&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=6&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;문제가 단순하고 범위도 적어 아무렇게나 풀어도 쉽게 답을 구할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 5</title>
      <link>http://ntalbs.github.io/2015/project-euler-005/</link>
      <pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-005/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;1 ~ 20 사이의 어떤 수로도 나누어 떨어지는 가장 작은 수는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=5&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=5&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1~20의 최소공배수(Least Common Multiple)를 구하는 문제다. 최소공배수는 다음 식으로 간단히 구할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs를 데이터베이스 클라이언트로 사용하기</title>
      <link>http://ntalbs.github.io/2015/emacs-as-a-db-client/</link>
      <pubDate>Wed, 14 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/emacs-as-a-db-client/</guid>
      <description>&lt;p&gt;Emacs에서 데이터베이스 쿼리를 할 수 있으면 좋겠다는 생각이 들었다. 지금까지 찾은 방법은 SQLi를 이용한 방법과 edbi를 사용하는 방법 두 가지다. SQLi는 Emacs에 기본 기능을 사용하기 때문에 별도 패키지를 설치하지 않아도 되지만 기능도 기본 수준이다. edbi는 SQLi보다 풍부한 기능을 제공하지만 별도 패키지를 설치해야 하고 &lt;code&gt;cpan&lt;/code&gt;으로 &lt;code&gt;RPC::EPC::Service&lt;/code&gt;, &lt;code&gt;DBI&lt;/code&gt;, 데이터베이스 드라이버 등의 Perl 모듈을 설치해야 한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 4</title>
      <link>http://ntalbs.github.io/2015/project-euler-004/</link>
      <pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-004/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;세자리 수를 곱해 만들 수 있는 가장 큰 대칭수는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=4&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=4&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;세 자리 정수는 100부터 999까지다. 따라서 무식하게 풀어로 루프 회수가 1백만 번을 넘지 않으며, $a \times b = b \times a$임을 고려해 중복을 제거하면 루프 회수를 절반으로 줄일 수 있다. 따라서 대충 풀어도 금방 답을 구할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac OS X에서 Eclipse 종료 단축키 변경</title>
      <link>http://ntalbs.github.io/2015/changing-shortcut-in-macosx/</link>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/changing-shortcut-in-macosx/</guid>
      <description>&lt;p&gt;Eclipse에서 개발할 때 Quick Fix 기능을 자주 사용한다. 입력하던 코드에 빨간색 물결 모양의 밑줄이 표시되면 바로 &lt;code&gt;Cmd+1&lt;/code&gt;(윈도우에서는 &lt;code&gt;Ctrl+1&lt;/code&gt;)을 누른다. 대부분의 경우 Quick Fix가 제안하는 대로만 해도 문제가 해결된다. 그런데 맥북에어에서 작업할 때는 &lt;code&gt;Cmd+1&lt;/code&gt;을 누르려다 &lt;code&gt;Cmd+Q&lt;/code&gt;를 누르는 실수를 자주 한다. &lt;code&gt;Cmd+Q&lt;/code&gt;는 Mac OS X의 거의 모든 애플리케이션에서 종료 단축키로 사용된다. &lt;code&gt;Q&lt;/code&gt;와 &lt;code&gt;1&lt;/code&gt;이 가까이 있는 데다 맥북에어는 키보드가 일반 키보드에 비해 조밀하기 때문에 &lt;code&gt;1&lt;/code&gt;을 누르려다 실수로 &lt;code&gt;Q&lt;/code&gt;를 눌러 의도치 않게 Eclipse가 종료되어 여간 짜증나는 게 아니었다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 3</title>
      <link>http://ntalbs.github.io/2015/project-euler-003/</link>
      <pubDate>Sun, 11 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-003/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;600851475143의 가장 큰 소인수는?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=3&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=3&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;백만 정도에 대해서는 루프를 돌려도 비교적 빠르게 답을 얻을 수 있지만, 천만이 넘는 경우에는 무식하게 루프를 돌리는 방법이 통하지 않는다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL에서 행을 열로 바꾸는 방법</title>
      <link>http://ntalbs.github.io/2015/sql-transpose/</link>
      <pubDate>Fri, 09 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/sql-transpose/</guid>
      <description>&lt;p&gt;쿼리를 작성하다 보면 행을 열로 또는 열을 행으로 바꾸고 싶은 경우가 생긴다. 데이터 모델을 만들 때 같은 종류의 데이터는 행으로 저장하는 것이 좋지만, 고객은 열로 표현된 형태의 보고서를 보고 싶을 수 있다. 쿼리 결과를 행에서 열로 또는 열에서 행으로 바꾸는 작업은 원리를 이해하면 어렵지 않지만 약간의 기교가 필요하다. 그래서인지 쿼리 결과의 행/열 전환은 SQL 관련 단골 질문이기도 하다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 2</title>
      <link>http://ntalbs.github.io/2015/project-euler-002/</link>
      <pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-002/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;피보나치 수열에서 4백만 이하이면서 짝수인 항의 합은?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=2&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=2&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;피보나치 수열의 정의는 다음과 같다.&lt;/p&gt;

&lt;div&gt;$$
\begin{aligned}
F_n &amp;= F_{n-1} + F_{n-2}, \\
F_2 &amp;= F_1 = 1
\end{aligned}
$$&lt;/div&gt;

&lt;p&gt;구현하기 쉬워 보인다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>담배 컷터</title>
      <link>http://ntalbs.github.io/2015/cigaret-cutter/</link>
      <pubDate>Tue, 06 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/cigaret-cutter/</guid>
      <description>&lt;p&gt;담배값이 크게 인상되어 흡연자의 부담이 늘었지만, 주변에 담배를 끊겠다는 사람은 많아 보이지 않는다. 점심을 먹으러 가는 중 회사 동료가 담배를 피우다 장초를 버리는 모습을 보고 아깝다는 생각이 들었다. 저렇게 태우지 않은 부분이 많이 남았을 때는 피운 부분까지만 잘라내 보관했다가 나중에 다시 피우면 좋지 않을까 해서 떠올린 것이 &lt;strong&gt;담배 컷터&lt;/strong&gt;다. 시가(cigar)의 경우는 시가 컷터가 있어 태운 부분만 잘라내는 것을 어디선가 본 것 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>프로젝트 오일러 1</title>
      <link>http://ntalbs.github.io/2015/project-euler-001/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2015/project-euler-001/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;1000보다 작은 자연수 중에서 3 또는 5의 배수를 모두 더하면?&lt;/p&gt;

&lt;p&gt;문제 자세히 보기: &lt;a href=&#34;http://euler.synap.co.kr/prob_detail.php?id=1&#34;&gt;[국어]&lt;/a&gt; &lt;a href=&#34;https://projecteuler.net/problem=1&#34;&gt;[영어]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프로젝트 오일러 문제 중 가장 쉬운 문제일 것이다. 처음에는 문제가 이렇게 쉽지만 뒤로 갈수록 조금씩 어려워져 나중에는 문제가 무슨 뜻인지 이해하기도 힘들어진다. 이 문제는 너무 단순해 아무렇게나 풀어도 답을 구할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MacOS X에서 JDK 버전 전환</title>
      <link>http://ntalbs.github.io/2014/multiple-jdk-on-macosx/</link>
      <pubDate>Tue, 16 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/multiple-jdk-on-macosx/</guid>
      <description>&lt;p&gt;보통 JDK 최신 버전을 설치해 사용한다. 운영환경에 여전히 JDK7을 쓰고 있지만 개발환경에서는 JDK8을 쓰되 &lt;code&gt;-target 1.7&lt;/code&gt; 옵션을 주어 컴파일하면 문제가 없지 않을까 생각했다. 그런데 서버를 올릴때 계속 에러가 발생해 인터넷에서 찾아보니 Spring 3.2.8 버그란다. 이 문제는 Spring 3.2.9에서 해결되었다고 하지만 운영환경은 여전히 Spring 3.2.8을 사용하고 있고, 내가 Spring 버전을 올릴 권한도 없다. 어쩔 수 없이 노트북에 JDK7을 설치할 수밖에 없다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>정규 표현식을 이용한 찾기/바꾸기 시 카운터 사용</title>
      <link>http://ntalbs.github.io/2014/regexp-counter/</link>
      <pubDate>Fri, 05 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/regexp-counter/</guid>
      <description>&lt;p&gt;반복된 패턴을 찾아 다른 문자열로 치환하고 싶을 때 정규 표현식을 사용하면 편리하다. 지금까지는 정규 표현식을 사용해 문자를 치환할 때 고정된 패턴만 지정할 수 있다고 생각했다. 그래서 스택오어플로우에서 정규 표현식으로 문자열을 치환할 때 카운터(counter)를 사용할 수 있냐는 질문을 봤을 때 &amp;lsquo;되지도 않는 질문&amp;rsquo;이라 속단했다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL Row Generator</title>
      <link>http://ntalbs.github.io/2014/mysql-row-generator/</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/mysql-row-generator/</guid>
      <description>&lt;p&gt;Oracle에서는 &lt;code&gt;connect by&lt;/code&gt;를 사용해 필요한 만큼 행(row)을 생성할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select level from dual connect by level &amp;lt;= 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PostgreSQL에서도 &lt;code&gt;generate_series&lt;/code&gt;를 사용해 쉽게 행을 만들 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from generate_series(1, 100);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;재귀적 CTE(Common Table Expressions)를 사용하면 특정 DBMS에서만 제공하는 기능을 사용하지 않고 표준 SQL만 사용해 행 생성기(row generator)를 만들 수 있다. PostgreSQL에서는 다음과 같은 식으로 원하는 만큼 행을 생성할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>함수형 언어로 구현한 퀵정렬</title>
      <link>http://ntalbs.github.io/2014/quicksort/</link>
      <pubDate>Tue, 11 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/quicksort/</guid>
      <description>&lt;blockquote class=&#34;blockquote-reverse&#34;&gt;언어의 한계가 사고의 한계다.
- 비트겐슈타인&lt;/blockquote&gt;

&lt;p&gt;아주 오래 전에, 그러니까 C/C++, Java 외 다른 언어는 공부할 필요가 없다고 생각했던 때에, 잡지에서 다음과 같은  코드를 본 적이 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;qsort [] = []
qsort (p:xs) = qsort [y | y &amp;lt;- xs, y &amp;lt; p] ++ [p] ++ qsort [y | y &amp;lt;- xs, y &amp;gt;= p]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hexo: 소스 코드 하이라이팅 스타일 변경</title>
      <link>http://ntalbs.github.io/2014/hexo-hljs/</link>
      <pubDate>Thu, 16 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/hexo-hljs/</guid>
      <description>&lt;p&gt;블로그 테마를 수정하면서 소스 코드 하이라이팅 스타일도 바꾸고 싶었다. 내 테마의 스타일은 &lt;a href=&#34;http://learnboost.github.io/stylus/&#34;&gt;stylus&lt;/a&gt;로 되어 있는데, 파일을 살펴보니 중간에 다음과 같은 부분이 보였다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>초보 DBA 삽질기 5</title>
      <link>http://ntalbs.github.io/2014/dba-story-5/</link>
      <pubDate>Sat, 04 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/dba-story-5/</guid>
      <description>&lt;p&gt;그동안 프로젝트 성격의 일도 있었지만 대부분은 반복적인 작업이었다. 일이 점점 지겨워지고 있었다. 매일 아침 데이터베이스 상태를 확인하는 것도, 작업을 할 때마다 세 번씩 확인을 받아야 하는 것도 모두 짜증났다. 내가 사고를 쳤기 때문에 이런 절차가 생겼고, 이런 절차를 만든 게 나 자신이었고, 안정적인 운영을 위해서는 이런 절차가 필요하다는 점이 나를 더욱 힘들게 했다. 참을성이 바닥나고 있었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>초보 DBA 삽질기 4</title>
      <link>http://ntalbs.github.io/2014/dba-story-4/</link>
      <pubDate>Wed, 01 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/dba-story-4/</guid>
      <description>&lt;p&gt;입사한지 1년 반이 되어 가고 있었다. 그동안 심각한 장애는 대부분 내 실수에서 비롯되었다. 애플리케이션 서버는 여러 대로 운영하기 때문에 한 대에 문제가 생겨도 거래가 중단되지 않는다. 데이터베이스는 문제가 생기면 모든 거래가 중단되는 단일 실패 지점(Single poing of failure)이었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>초보 DBA 삽질기 3</title>
      <link>http://ntalbs.github.io/2014/dba-story-3/</link>
      <pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/dba-story-3/</guid>
      <description>&lt;p&gt;지난 번 사고 후 네 달 이상 장애가 발생하지 않았다. 처음에 조금 실수를 했지만 이제는 어느 정도 자리를 잡았다는 생각이 들었다. 그동안 많은 일을 했고, 특히 전산센터를 이전할 때 내가 작성한 데이터베이스 동기화 프로그램이 중요한 역할을 했다는 점에 자부심을 느꼈다. 몇 달 동안 사고 없이 데이터베이스를 운영하면서 감도 조금 생겼다. &lt;strong&gt;하지만 실수는 방심할 때 찾아오는 법이다.&lt;/strong&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>초보 DBA 삽질기 2</title>
      <link>http://ntalbs.github.io/2014/dba-story-2/</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/dba-story-2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;잘 돌아가면 건드리지 말라는 말이 있다.&lt;/strong&gt; 100% 완벽하게 이해하지 못하는 시스템에 대해서는 이 말이 좋은 충고일 수도 있겠다는 생각이 든다. 데이터베이스 관리 시스템은 매우 복잡한 소프트웨어이므로 이것을 완벽하게 이해하기란 정말 어려운 일이다. 더군다나 데이터베이스가 어떻게 구성되어 있느냐에 따라 같은 명령도 다른 양상을 보일 수 있다. 중단이 허용되지 않는 데이터베이스 시스템에서 뭔가 작업하려면 더욱 주의해야 하고 가능한 보수적으로 접근해야 한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>초보 DBA 삽질기 1</title>
      <link>http://ntalbs.github.io/2014/dba-story-1/</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/dba-story-1/</guid>
      <description>&lt;p&gt;그동안 SI 프로젝트에서 개발 DBA만 하다 처음으로 운영 DBA가 되었다. 그날도 뭘 해야 할지 몰라 데이터베이스 이곳 저곳을 들여다보며 일거리를 찾고 있었다. 모두들 바쁜데 나만 한가한 것 같았다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript 코드 안 HTML 문자열</title>
      <link>http://ntalbs.github.io/2014/html-str-in-js/</link>
      <pubDate>Fri, 22 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/html-str-in-js/</guid>
      <description>&lt;p&gt;JavaScript 코드에 HTML 문자열을 써야 하는 경우가 종종 있다. 문자열이 짧을 때는 그냥 한 줄로 써도 크게 상관 없다. 복잡한 계층 구조를 가지는 긴 HTML 문자열을 써야 할 경우에는 한 줄로 작성하지 않는다. 작성하기도 어렵고 알아보기도 어렵기 때문이다. 보통 다음과 같이 여러 줄로 문자열을 만들고 &lt;code&gt;+&lt;/code&gt;로 연결해 변수에 저장한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>개발자의 암울한 미래</title>
      <link>http://ntalbs.github.io/2014/dystopian-future/</link>
      <pubDate>Wed, 20 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/dystopian-future/</guid>
      <description>&lt;p&gt;IT 분야는 기술 발전이 빠르기 때문에 뒤쳐지지 않으려면 끊임없이 공부해야 한다. 젊었을 때는 새로운 기술을 따라가는 데 큰 무리가 없었다. 음주가무를 좋아한 것도 아니고 청춘사업은 개점휴업 상태였다. 특별히 할 일이 있는 경우는 거의 없었기에 퇴근 후나 주말이면 컴퓨터 붙잡고 인터넷을 돌아다니며 필요 기술 관련 자료를 읽고 연습할 수 있었다. 노력만 하면 됐다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>환경변수에 설정 정보 저장하기</title>
      <link>http://ntalbs.github.io/2014/config-vars/</link>
      <pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/config-vars/</guid>
      <description>&lt;p&gt;웹 애플리케이션에서 데이터베이스 계정 정보나 URL, 외부 서비스에 대한 인증 정보는 어떻게 관리하는 것이 좋을까? 설정 파일을 만들어 여기에 관리하는 방법도 있지만, 환경에 따라 설정이 변해야 하는 경우 관리가 까다로워 진다. 어떻게 하는 게 좋을까?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jps 사용법</title>
      <link>http://ntalbs.github.io/2014/jps/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/jps/</guid>
      <description>자바로 개발할 때 보통 java와 javac만 사용하지만, JDK에는 이 이외에도 많은 도구가 포함되어 있다. 그 중 하나인 jps를 살펴보자. jps는 JVM 프로세스 상태를 보는 도구로 UNIX의 ps와 비슷하다. ps는 운영체계의 모든 프로세스 상태를 보여주지만 jps는 JVM 프로세스만 보여준다는 차이가 있다. jps 실행 시 목표 시스템(target system)을 지정하면 원격 시스템의 JVM 프로세스 상태도 확인할 수 있다.
사용법 $ jps [options] [hostid]  옵션  -q 클래스 이름, JAR 파일 이름, main 메서드에 전달된 인자를 모두 생략하고 JVM 아이디(보통 OS 프로세스 아이디와 동일.</description>
    </item>
    
    <item>
      <title>매클로린 급수를 이용한 sin(x) 구현</title>
      <link>http://ntalbs.github.io/2014/implementing-sin-x/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/implementing-sin-x/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://ntalbs.github.io/2014/newtons-method/&#34;&gt;뉴튼 법을 이용한 근사값 구하기&lt;/a&gt;에서 매클로린 급수를 이용해 $\sin x$와 같은 초월함수의 값을 구할 수 있다고 했다. 여기서 clojure를 이용해 직접 구현해보려 한다. $\sin x$의 매클로린 급수는 다음과 같다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>뉴튼 법을 이용한 근사값 구하기</title>
      <link>http://ntalbs.github.io/2014/newtons-method/</link>
      <pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/newtons-method/</guid>
      <description>&lt;p&gt;$\sqrt x$ 함수의 값을 어떻게 계산할 수 있을까? Java라면 &lt;code&gt;Math.sqrt(x)&lt;/code&gt; 함수를 통해 제곱근을 구할 수 있는데, &lt;code&gt;Math.sqrt(x)&lt;/code&gt; 함수는 어떻게 구현한 것일까?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>저자 증정본 처리</title>
      <link>http://ntalbs.github.io/2014/authors-copy/</link>
      <pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/authors-copy/</guid>
      <description>&lt;p&gt;자신의 이름으로 책을 낸다는 것은 정말 흥분되는 일이다. 처음 번역서를 냈을 때가 생각난다. 사비를 들여 수십 권을 구입해 회사 사람들에게 돌렸다. 한권 한권 서명해 동료들에게 나눠줄 때의 뿌듯함은 이루 말할 수 없었다. 쉬는 시간에 차 한잔 들고 사무실을 어슬렁거리며 동료 책상이나 책꽂이에 놓여 있는 내 책을 보며 미소를 짓곤 했다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>수작업 brew 포뮬러 업데이트</title>
      <link>http://ntalbs.github.io/2014/manual-brew-update/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/manual-brew-update/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;는 Mac OS X를 위한 패키기 관리자다. Homebrew를 이용하면 Mac OS X에 설치되어 있지 않은 다양한 패키지를 쉽게 설치하고 관리할 수 있다. Homebrew로 설치한 패키지의 새 버전이 나왔다면 콘솔에서 &lt;code&gt;brew upgrade&lt;/code&gt; 명령으로 쉽게 업그레이드 할 수 있다. 웬만한 것은 거의 brew를 통해 설치할 수 있고, 매우 빠르게 업데이트 된다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>infix 매크로</title>
      <link>http://ntalbs.github.io/2014/infix-macro/</link>
      <pubDate>Wed, 25 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/infix-macro/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://ntalbs.github.io/2014/clojure-fallacy/&#34;&gt;Clojure에 대한 오해&lt;/a&gt;에서 LISP 언어가 널리 사용되지 않는 주요 이유 중 하나로 &lt;strong&gt;전위 표기법&lt;/strong&gt;(prefix notation)을 들었다. LISP의 표현력이 뛰어난 이유 중 하나가 전위 표기법 때문인데 이것 때문에 LISP이 널리 사용되지 못한다니 역설이 아닐 수 없다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript에서 private 필드</title>
      <link>http://ntalbs.github.io/2014/private-in-js/</link>
      <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/private-in-js/</guid>
      <description>&lt;p&gt;JavaScript를 주로 사용하게 되면서 JavaScript에 대한 부정적인 생각이 줄어들었지만, 여전히 마음에 들지 않는 부분이 있다. 그 중 하나가 &lt;code&gt;private&lt;/code&gt; 필드를 만들기가 애매하다는 점이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IE8, 지원 해야 할까?</title>
      <link>http://ntalbs.github.io/2014/ignoring-ie8/</link>
      <pubDate>Thu, 22 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/ignoring-ie8/</guid>
      <description>&lt;p&gt;웹 애플리케이션을 개발할 때 IE8과 같은 오래된 브라우저를 지원하지 않기로 하면 개발이 편해진다. 최신 브라우저에서 제공하는 기능을 최대한 활용할 수 있고, 오래된 브라우저에서 지원하지 않는 기능을 억지로 구현하기 위해 애쓰지 않아도 된다. 코드도 간단해진다. 그러나 세상 일이란 게 항상 그렇듯 웹 개발도 내 생각대로만 돌아가지는 않는다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>구글 앱 엔진에 Clojure 앱 올리기</title>
      <link>http://ntalbs.github.io/2014/clojure-gae-howto/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/clojure-gae-howto/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/products/app-engine/&#34;&gt;구글 앱 엔진(Google App Engine)&lt;/a&gt;은 Clojure를 위한 SDK를 따로 제공하지는 않지만 Clojure는 JVM에서 실행되므로 Java가 실행되는 환경이라면 Clojure도 실행할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>중용 23장</title>
      <link>http://ntalbs.github.io/2014/moderation/</link>
      <pubDate>Mon, 12 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/moderation/</guid>
      <description>&lt;p&gt;영화 &lt;strong&gt;&amp;lsquo;역린&amp;rsquo;&lt;/strong&gt;을 보았다. 최근 본 영화 중에 가장 괜찮았던 것 같다. 영화가 끝나고 나서도 영화 중간에 나왔던 &lt;strong&gt;중용 23장&lt;/strong&gt;이 귓가에 맴돌아 인터넷에서 검색해봤더니, 감동한 사람이 나만 있었던 게 아니었나 보다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Project Lombok</title>
      <link>http://ntalbs.github.io/2014/lombok/</link>
      <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/lombok/</guid>
      <description>&lt;p&gt;Java로 프로그램을 작성할 때 &lt;a href=&#34;http://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt;을 이용하면 보일러플레이트 코드를 줄여 코드를 깔끔하게 유지할 수 있다. 사용하기도 편하고 IDE와도 잘 통합되기 때문에(안타깝게 IntelliJ와는 궁합이 안 맞는듯 하다. 하지만 난 Eclipse를 사용하니까&amp;hellip;) 널리 사용될 줄 알았는데 의외로 모르는 개발자가 많은 것 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>visual-regexp</title>
      <link>http://ntalbs.github.io/2014/visual-regexp/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/visual-regexp/</guid>
      <description>&lt;p&gt;Emacs나 Vim을 사용할 때 &lt;strong&gt;정규표현식&lt;/strong&gt;을 자주 활용한다. Vim의 정규표현식에는 조금 익숙해 졌는데 Emacs의 정규표현식은 Vim과 미묘하게 달라 가끔 애를 먹일 때가 있다. 그런데 최근 &lt;a href=&#34;https://github.com/benma/visual-regexp.el&#34;&gt;visual-regexp&lt;/a&gt;를 알게 되었다. Emacs에 원래 있는 &lt;code&gt;replace-regexp&lt;/code&gt;와 비슷한 녀석인데 정규표현식을 입력하면 편집중인 버퍼에 피드백이 즉시 표시된다. 따라서 입력하고 있는 정규표현식에 대응되는 문자열, 캡쳐링되는 부분까지 바로 확인할 수 있다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>정적분 문제</title>
      <link>http://ntalbs.github.io/2014/integral-problem/</link>
      <pubDate>Tue, 22 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/integral-problem/</guid>
      <description>학교를 졸업한지 오래되어 지금은 미적분이 거의 생각나지 않지만, 아직도 기억하고 있는 적분 문제가 하나 있다. 다음 정적분 값을 구하는 문제인데, 적분 자체는 어렵지 않지만 발상의 전환이 필요하다. 선배에게 이 문제 풀이 설명을 듣었을 때의 감동이 아직도 생생하다.
$$ \begin{aligned} I = \int_{-\infty}^{\infty} e^{-x^2} dx \end{aligned} $$ 그냥 $I$ 값을 구하려 하면 문제가 풀리지 않는다. 그러나 $I^2$ 값은 다음과 같은 식으로 구할 수 있다.
$$ \begin{aligned} I^2 &amp;= \left(\int_{-\infty}^{\infty} e^{-x^2} dx\right)^2 \\ &amp;= \int_{-\infty}^{\infty} e^{-x^2} dx \cdot \int_{-\infty}^{\infty} e^{-y^2} dy \\ &amp;= \int_{-\infty}^{\infty}\int_{-\infty}^{\infty} e^{-(x^2+y^2)} dx\,dy \\ \end{aligned} $$ 정적분 값은 적분변수와 상관 없으므로 $x$를 $y$로 바꿔도 상관 없다.</description>
    </item>
    
    <item>
      <title>Hexo: 블로그에 수식 표현하기</title>
      <link>http://ntalbs.github.io/2014/hexo-math/</link>
      <pubDate>Fri, 18 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/hexo-math/</guid>
      <description>블로그에 수식을 쓰는 일이 많지는 않지만 종종 아쉬울 때가 있다. 지금까지는 MS 파워포인트에서 수식편집기를 사용해 수식을 입력한 다음 수식 영역을 스크린 캡쳐해 이미지로 저장해 사용했다. 처음의 번거로운 작업은 참을 수 있지만, 수식을 변경할 일이 생기면 여간 짜증나는 게 아니었다. 내가 사용하는 Hexo에서 혹시 이런 걸 편하게 해주는 도구가 있을까 찾아봤는데 역시 있었다. MathJax를 사용해 수식을 쉽게 사용할 수 있게 해주는 hexo-math란 플러그인이 있었다.
설치 및 설정 방법은 간단하다. 먼저 블로그 홈 디렉터리로 이동해 hexo-math를 설치한다.</description>
    </item>
    
    <item>
      <title>텍스트 노드 조작 insertData</title>
      <link>http://ntalbs.github.io/2014/insert-data/</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/insert-data/</guid>
      <description>텍스트 노드에 텍스트를 삽입할 때 처음에는 텍스트 노드의 textContent를 직접 조작했다. 즉 Range 객체에서 텍스트를 삽입할 위치를 구한 다음 다음과 같이 substr 함수로 텍스트를 직접 조작했다. var rng = caret.getRange(), node = rng.startContainer, offset = rng.startOffset, tc = node.textContent; node.textContent = tc.substr(0, offset) + t + tc.substr(offset); ...  코드가 마음에 들지 않았지만, 다른 방법을 몰라 어쩔 수 없이 이렇게 썼다. 그러다 Range.insertNode()를 알게 되었다. 이 녀석을 사용하면 좀더 쉽게 텍스트를 조작할 수 있다.</description>
    </item>
    
    <item>
      <title>다단계 번호 매기기</title>
      <link>http://ntalbs.github.io/2014/numbering-multi-level-list/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/numbering-multi-level-list/</guid>
      <description>요즘은 간단한 로직을 테스트할 때 Clojure로 코드를 작성해 확인해보곤 한다. 다단계 번호매기기도 Clojure를 사용해 로직을 구현해보고 생각대로 잘 되는 것을 확인한 다음 JavaScript로 옮기는 방법을 사용했다.
MS워드에는 다단계 번호매기기 기능을 사용하면 다음과 같은 식으로 다단계 번호를 매길 수 있다. 1. 항목 1 1.1 항목 11 1.2 항목 12 1.2.1 항목 121 1.2.2 항목 122 1.3 항목 13 2. 항목 2  다단계 번호는 어떻게 구현할 수 있을까? 문서 모델이 다음과 같이 되어 있다면 목록(list)을 선택해 수준(level)의 배열을 만들어 각 수준에 맞는 번호를 생성하면 될 것 같다.</description>
    </item>
    
    <item>
      <title>Emacs</title>
      <link>http://ntalbs.github.io/2014/emacs/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/emacs/</guid>
      <description>Emacs를 시작한 것은 꽤 오래 전이지만, 그동안 계속 사용한 것은 아니어서 지금도 Emacs 초보자 수준을 벗어나지 못하고 있다. 예전에 Java를 많이 사용할 때는 Eclipse를 썼는데, 요즘은 주로 JavaScript로 작업하다보니 다시 Emacs로 돌아오게 되었다. JavaScript(또는 다른 스크립트 언어)로 개발할 때 Eclipse는 무겁기만 하고 편하지도 않다. 어떻게 보면 Emacs는 구식 에디터이기 때문에 Sublime Text와 같이 최근에 나온 에디터와 비교하면 조금 투박한 면이 없지 않다. Sublime Text를 잠시 써보려 했지만 Sublime Text만의 독특한 단축키에 적응하지 못할 것 같아 포기했다.</description>
    </item>
    
    <item>
      <title>MS워드 샘플 텍스트 입력</title>
      <link>http://ntalbs.github.io/2014/word-lorem/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/word-lorem/</guid>
      <description>에디터를 개발하면서 MS워드의 기능과 동작을 자주 참고하는데, 기능을 확인할 때마다 샘플 텍스트를 입력하는 것은 여간 번거로운게 아니었다. 처음에는 열심히 입력하다가 결국은 키보드를 아무렇게나 두드려 텍스트를 입력하게 된다. 아무렇게나 입력하더라도 필요한 분량의 텍스트를 입력하는데는 시간이 들고 이런 시간 때문에 작업 진행 속도가 느려진다. 그런데, 아침에 동료와 커피를 마시며 이야기를 나누다가 유용한 팁을 알게 되었다. MS워드에서 간단한 명령으로 원하는 만큼 샘플 텍스트를 입력할 수 있다는 것이었다. 이 샘플 텍스트 자동 생성 기능을 사용하면 에디터 기능 확인 작업을 훨씬 쉽게 할 수 있을 것 같다.</description>
    </item>
    
    <item>
      <title>Clojure에 대한 오해</title>
      <link>http://ntalbs.github.io/2014/clojure-fallacy/</link>
      <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/clojure-fallacy/</guid>
      <description>Clojure는 LISP 방언으로 LISP이 가진 한계(?)를 그대로 가지고 있다. 여기서 한계란 언어 자체의 한계를 뜻하는 것이 아니라 LISP을 사용하지 않는 사람들의 선입견, 오해, 편견을 말하는 것이다. 알고나면 오해였다는 것을 깨닫겠지만 이 선입견을 극복하기는 쉬워 보이지 않는다. 사람들이 LISP에 거부감을 느끼는 가장 큰 이유는 다음 두 가지가 아닐까 생각한다.  괄호, 괄호, 괄호 전위 표기법 (prefix notation)  괄호 괄호에 대해서는 억울한 면이 있다. 사람들은 코드 블록 뒤에 ))))와 같이 괄호가 무더기로 붙어 있는 것을 보고 기겁을 하지만, 알고보면 중괄호({와 })를 사용하는 언어에 비해 괄호가 많은 것이 결코 아니다.</description>
    </item>
    
    <item>
      <title>블로깅 다시 시작</title>
      <link>http://ntalbs.github.io/2014/restart/</link>
      <pubDate>Fri, 04 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2014/restart/</guid>
      <description>거의 2년만에 블로그에 글을 쓴다. 그동안 티스토리 블로그를 썼는데, 모두 깃헙(GitHub)으로 옮겼다. 깃헙 페이지를 만들면 깃헙 저장소를 블로그로 쓸 수 있다. 만드는 방법도 단순하다. 깃헙에서 {아이디}.github.io로 저장소를 만들면 된다. 이 저장소에 있는 HTML 파일은 브라우저에서 그대로 볼 수 있다. 정적 블로깅 엔진에 대한 이야기도 빼놓을 수 없겠다. 정적 블로깅 엔진을 들은 것은 꽤 되었지만 어느 엔진을 쓸까 망설이면서 많은 시간을 보냈다. 원조격인 Jekyll이나 Octopress는 ruby로 되어 있다는 점이 마음에 들지 않았다.</description>
    </item>
    
    <item>
      <title>쥐메일 주소에 &#39;&#43;&#39; 추가하기</title>
      <link>http://ntalbs.github.io/2012/gmail-plus/</link>
      <pubDate>Mon, 28 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2012/gmail-plus/</guid>
      <description>쥐메일 주소에 +를 더해 표식을 남길 수 있다. 즉, 쥐메일 주소가 xxx@gmail.com이라면 xxx+shopping@gmail.com과 같이 할 수 있다. 이렇게 해도 xxx@gmail.com으로 메일이 전달되는데, 메일 주소에 포함된 +shopping으로 메일을 쉽게 필터링할 수 있다. 보통은 발신자 주소로 필터링 했는데, 이 방법을 쓰면 발신자를 일일히 등록하지 않아도 메일 주소 패턴만으로 메일을 쉽게 필터링할 수 있다.</description>
    </item>
    
    <item>
      <title>Ways 프로그램</title>
      <link>http://ntalbs.github.io/2012/ways/</link>
      <pubDate>Thu, 02 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2012/ways/</guid>
      <description>&lt;p&gt;이건 내가 새로운 프로그래밍 언어를 배울 때마다 만들어 보는 간단한 데모 프로그램이다. 미리 정해진 규칙에 따라 화면에 계속 그림을 그린다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>지역 변수에 final을 붙여야 하나</title>
      <link>http://ntalbs.github.io/2011/final-local-var/</link>
      <pubDate>Tue, 23 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2011/final-local-var/</guid>
      <description>&lt;p&gt;회사에서 작성하는 모든 소스 코드에 대해 Quality Practice(이하 QP)를 적용하려 하고 있다. Java 코드에 대해서는 &lt;a href=&#34;http://findbugs.sourceforge.net/&#34;&gt;Findbugs&lt;/a&gt;, &lt;a href=&#34;http://pmd.sourceforge.net/&#34;&gt;PMD&lt;/a&gt;, &lt;a href=&#34;http://checkstyle.sourceforge.net/&#34;&gt;Checkstyle&lt;/a&gt;과 같은 도구를 사용해 소스 코드를 분석한다. 물론 각 도구를 적용할 때의 규칙(rule)은 QP 담당자였던 내 주관적 판단(또는 취향)에 따라 조정한다. &lt;span style=&#34;color:lightgray&#34;&gt;(지금은 QP 담당자가 다른 사람으로 바뀌었지만, 각 규칙을 조정할 정도로 관심을 가지지는 않는 듯 하다.)&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NoSuchMethodError</title>
      <link>http://ntalbs.github.io/2011/no-such-method-error/</link>
      <pubDate>Fri, 12 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2011/no-such-method-error/</guid>
      <description>&lt;p&gt;CI서버에서 대략 삼분의 일 정도의 테스트가 실패하고 있었다. 로그를 확인해보니 어이없게도 실패하는 테스트에서 &lt;code&gt;NoSuchMethodError&lt;/code&gt;가 발생했고, 모두 Google의 컬렉션 라이브러리를 사용하는 부분이었다. 이클립스에서 테스트를 실행시킬 때는 아무런 문제가 없는데 CI 서버에서는 실패하는 것이었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>커버리지 분석 시 불필요한 js 파일 제외하기</title>
      <link>http://ntalbs.github.io/2011/jstestdriver-exclude/</link>
      <pubDate>Sat, 04 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2011/jstestdriver-exclude/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://ntalbs.github.io/2010/hudson-jstestdriver-coverage/&#34;&gt;Hudson에서 JsTestDriver를 이용한 커버리지 분석 설정&lt;/a&gt;에서 JsTestDriver로 작성한 테스트에 대해 커버리지를 어떻게 볼 수 있는지 설명했다. 그런데 이렇게 테스트 커버리지를 분석할 때 문제가 하나 있다. 외부 라이브러리가 커버리지 분석 리포트에 포함되어 커버리지 결과가 왜곡된다는 점이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>교활한 XML</title>
      <link>http://ntalbs.github.io/2011/tricky-xml/</link>
      <pubDate>Thu, 14 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2011/tricky-xml/</guid>
      <description>XML 파일이 프로그램을 죽일 수도 있다는 생각은 하지 못했다. XML은 그저 텍스트일 뿐이고 프로그램은 그저 파일을 읽어서 처리할 뿐인데&amp;hellip; 그런데 다음과 같은 파일을 보고서야 그럴 수도 있다는 것을 알게 되었다. &amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE billion [ &amp;lt;!ELEMENT billion (#PCDATA)&amp;gt; &amp;lt;!ENTITY laugh0 &amp;quot;ha&amp;quot;&amp;gt; &amp;lt;!ENTITY laugh1 &amp;quot;&amp;amp;laugh0;&amp;amp;laugh0;&amp;quot;&amp;gt; &amp;lt;!ENTITY laugh2 &amp;quot;&amp;amp;laugh1;&amp;amp;laugh1;&amp;quot;&amp;gt; &amp;lt;!ENTITY laugh3 &amp;quot;&amp;amp;laugh2;&amp;amp;laugh2;&amp;quot;&amp;gt; &amp;lt;!ENTITY laugh4 &amp;quot;&amp;amp;laugh3;&amp;amp;laugh3;&amp;quot;&amp;gt; &amp;lt;!ENTITY laugh5 &amp;quot;&amp;amp;laugh4;&amp;amp;laugh4;&amp;quot;&amp;gt; &amp;lt;!ENTITY laugh6 &amp;quot;&amp;amp;laugh5;&amp;amp;laugh5;&amp;quot;&amp;gt; &amp;lt;!ENTITY laugh7 &amp;quot;&amp;amp;laugh6;&amp;amp;laugh6;&amp;quot;&amp;gt; &amp;lt;!ENTITY laugh8 &amp;quot;&amp;amp;laugh7;&amp;amp;laugh7;&amp;quot;&amp;gt; &amp;lt;!ENTITY laugh9 &amp;quot;&amp;amp;laugh8;&amp;amp;laugh8;&amp;quot;&amp;gt; &amp;lt;!ENTITY laugh10 &amp;quot;&amp;amp;laugh9;&amp;amp;laugh9;&amp;quot;&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>확률 문제</title>
      <link>http://ntalbs.github.io/2011/probablity/</link>
      <pubDate>Tue, 05 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2011/probablity/</guid>
      <description>&lt;p&gt;나 같은 보통 정도의 두뇌를 가진 사람에게 확률은 이해하기 어렵기만 하다.&lt;/p&gt;

&lt;p&gt;얼마전 회사 동료 한 명이 간단한 확률 문제를 물었다. 하트, 다이아몬드, 스페이드, 클로버가 각각 13장씩 있는 총 52장의 카드에서 1장을 골랐을때 이 카드가 하트일 확률은 얼마인가 하는 문제였다. 여기까지는 쉽게 생각할 수 있다. &lt;sup&gt;13&lt;/sup&gt;&amp;frasl;&lt;sub&gt;52&lt;/sub&gt; = 1/4다. 동료가 문제를 약간 변형해 질문했다. 52장의 카드 중 1장을 골라 따로 보관한 다음, 3장을 추가로 골라 뒤집어보니 모두 하트가 아니었다. 이때 처음 고른 카드가 하트일 확률은 얼마일까? 사실은 이걸 물어보려 했던 것이었다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>There are known knowns...</title>
      <link>http://ntalbs.github.io/2011/known-knowns/</link>
      <pubDate>Thu, 03 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2011/known-knowns/</guid>
      <description>&lt;p&gt;책을 읽다가 재미있는 인용구를 발견했다. &lt;a href=&#34;http://pragprog.com/book/bksqla/sql-antipatterns&#34;&gt;SQL Antipatterns&lt;/a&gt; 14장 Fear of the Unknown의 시작부분에 있는 인용문인데, 상당히 쉬운 영어로 오묘한 뜻을 전달하는 것 같은 느낌이 들었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Integer.MIN_VALUE</title>
      <link>http://ntalbs.github.io/2011/int-min-value/</link>
      <pubDate>Wed, 23 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2011/int-min-value/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://ntalbs.github.io/images/2011/int-min-value/2011-02-23-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683&#34;&gt;Effective Java&lt;/a&gt;로 유명한 &lt;a href=&#34;https://twitter.com/joshbloch&#34;&gt;Joshua Bloch&lt;/a&gt;의 트윗에 재미있는 글이 올라왔다. 엥, 어떤 수에 -1을 곱했는데 자기 자신이 된다고? 곧장 테스트 프로그램을 만들어 돌려봤더니 정말 그렇다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>생각해볼 문제</title>
      <link>http://ntalbs.github.io/2010/sql-problem/</link>
      <pubDate>Wed, 15 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/sql-problem/</guid>
      <description>&lt;p&gt;1부터 100까지 더하는 프로그램을 짜라면 많은 프로그래머들이 다음과 같이 &lt;code&gt;for&lt;/code&gt; 루프로 1부터 100까지 돌면서 합을 구하는 형식으로 코드를 작성할 것이다. (Python으로 구현)
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>parameter와 argument</title>
      <link>http://ntalbs.github.io/2010/parameter-argument/</link>
      <pubDate>Fri, 26 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/parameter-argument/</guid>
      <description>&lt;p&gt;일하다가 갑자기 &amp;ldquo;&lt;strong&gt;parameter&lt;/strong&gt;와 &lt;strong&gt;argument&lt;/strong&gt;가 어떻게 다를까? 각각의 정확한 뜻은 뭘까?&amp;rdquo; 하는 궁금증이 생겼다. parameter는 그냥 &amp;lsquo;파라미터&amp;rsquo; 또는 &amp;lsquo;매개변수&amp;rsquo;고 argument는 &amp;lsquo;인수&amp;rsquo; 또는 &amp;lsquo;인자&amp;rsquo;란 정도까지만 생각나고 정확한 뜻이나 구체적인 차이점 같은 것은 모르고 있다는 것을 깨달았다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hudson에서 JsTestDriver를 이용한 커버리지 분석 설정</title>
      <link>http://ntalbs.github.io/2010/hudson-jstestdriver-coverage/</link>
      <pubDate>Wed, 24 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/hudson-jstestdriver-coverage/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://ntalbs.github.io/2010/hudson-jstestdriver/&#34;&gt;Hudson에서 JsTestDriver 설정&lt;/a&gt;에서 Hudson에서 JsTestDriver를 설정하는 방법을 설명했다. 여기서는 Hudson에서 JsTestDriver를 이용해 테스트 커버리지 리포트를 생성하는 방법을 살펴보자.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hudson에서 JsTestDriver 설정</title>
      <link>http://ntalbs.github.io/2010/hudson-jstestdriver/</link>
      <pubDate>Mon, 22 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/hudson-jstestdriver/</guid>
      <description>&lt;p&gt;JsTestDriver를 사용하면 CI(Continuous Integration) 서버에서 JavaScript 코드에 대한 단위 테스트를 실행하고 코드 커버리지 리포트를 생성할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>유튜트 &gt; MP3 변환기</title>
      <link>http://ntalbs.github.io/2010/youtube-to-mp3/</link>
      <pubDate>Thu, 11 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/youtube-to-mp3/</guid>
      <description>&lt;p&gt;회사 사람들 몇 명과 함께 영어 받아쓰기 공부를 하기로 했다. 예전에는 뉴스를 MP3로 공유해주는 사이트가 있어 애용했는데, 요즘은 돈을 내야 MP3를 받을 수 있는 것 같다. 그러나 돈내는 것과 별개로 특정 사이트에서 제공해주는 뉴스 MP3로만 받아쓰기를 한다면 재미가 없을 것 같다. 유튜브 동영상 중 재미있는 강의 같은 것을 받아쓰기해보면 좋을 것 같다는 생각을 했다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google 첫 페이지 되돌아오다!</title>
      <link>http://ntalbs.github.io/2010/google-main-page/</link>
      <pubDate>Mon, 06 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/google-main-page/</guid>
      <description>&lt;p&gt;Google 첫 페이지가 예전 모습으로 돌아왔다. 한동안 이도저도 아닌 이상한 모양이었는데 다시 깔끔한 모습으로 되돌아와 기쁘다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>잡동사니 파일 정리</title>
      <link>http://ntalbs.github.io/2010/removing-rubbish-files/</link>
      <pubDate>Fri, 03 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/removing-rubbish-files/</guid>
      <description>&lt;p&gt;어제 운영체제를 WinXP에서 Win7으로 바꾸기 위해 기존 파일을 백업하는데 백업해야 할 양이 30 GB에 달했다. 예전에는 5~600 MB면 충분했는데&amp;hellip; 컴퓨터를 오래 사용하다보면 온갖 잡동사니 파일이 생기게 마련이다. 이런 것들이 쌓이다 보면 그 양이 어마어마해진다. 다행히 나는 동영상을 모으는 취미가 없다. 동영상까지 모았다면 정말 어마어마해졌을 것이다. 내 디스크에 쌓이는 파일은 다음과 같이 분류할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>default의 뜻</title>
      <link>http://ntalbs.github.io/2010/meaning-of-default/</link>
      <pubDate>Fri, 13 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/meaning-of-default/</guid>
      <description>&lt;p&gt;오전에 팀원 한 명이 &lt;strong&gt;&amp;lsquo;default의 뜻이 뭔지 아냐?&amp;rsquo;&lt;/strong&gt;며 다른 팀원들에게 물어보고 있었다. 사전을 찾아봤는데 그런 의미가 있는 줄 전혀 몰랐다면서. 프로그래머에게 &lt;strong&gt;default&lt;/strong&gt;는 낯선 단어가 아니지만 정확한 뜻이 내가 생각하는 그 뜻인지 확인해보기 위해 사전을 찾아봤다. 흔히 사용하는 영어 단어 중에 원래 뜻이 프로그래머들이 사용하는 뜻과 다른 경우가 많기 때문이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>&#39;리팩터링&#39;과 &#39;리팩토링&#39;</title>
      <link>http://ntalbs.github.io/2010/refactoring-korean/</link>
      <pubDate>Wed, 04 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/refactoring-korean/</guid>
      <description>&lt;p&gt;강중빈 이사님이 번역하신 &lt;a href=&#34;http://kangcom.com/sub/view.asp?topid=4&amp;amp;sku=201007200003&#34;&gt;프로그래머의 길 멘토에게 묻다&lt;/a&gt; 책거리에 초대받아 출판사에 갔었다. 출판사 분들과 함께 책과 관련된 이런 저런 이야기를 나누다가 외래어 한글 표기법에 대한 이야기가 나왔다. 이런 얘기를 하다보니 내가 처음 번역한 &amp;lsquo;&lt;a href=&#34;http://kangcom.com/sub/view.asp?topid=1&amp;amp;sku=200204020003&#34;&gt;리팩토링&lt;/a&gt;&amp;lsquo;의 표기법을 생각하지 않을 수 없었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>압축 해제와 동시에 import 하기</title>
      <link>http://ntalbs.github.io/2010/uncompress-import/</link>
      <pubDate>Mon, 02 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/uncompress-import/</guid>
      <description>압축된 덤프 파일을 압축 해제와 동시에 import 하는 방법이다. 압축을 해제할 만큼 디스크 공간이 충분하지 않을 때 유용하게 사용할 수 있다. 1. 파이프로 들어오는 데이터를 import 한다. 이 명령은 백그라운드로 실행되도록 한다.
$ imp system/pw fromuser=scott file=pipe log=imp_${dump_file}.log ignore=y &amp;  2. dump 파일을 압축 해제해 파이프로 넘긴다. uncompress로 압축 해제한 다음 $pipe로 넘긴다.
$ uncompress &amp;lt; exp.dmp.Z &amp;gt; $pipe  이를 응용해 다음과 같은 스크립트를 만들 수 있다.</description>
    </item>
    
    <item>
      <title>export와 동시에 압축하기</title>
      <link>http://ntalbs.github.io/2010/export-compress/</link>
      <pubDate>Sun, 01 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/export-compress/</guid>
      <description>다음과 같이 하면 export를 받은 후 압축하지 않고 export와 동시에 압축을 할 수 있다. export 파일 크기가 크고 디스크 용량이 충분하지 않을 때 사용하면 유용하다. 1. named pipe를 만든다. $ mknod /tmp/expimp_pipe p  2. pipe로부터 들어오는 데이터를 압축한다. 이 명령은 백그라운드로 실행되도록 한다.
$ compress &amp;lt; /tmp/expimp_pipe &amp;gt; exp.dmp.Z &amp;  3. pipe에 데이터를 쓴다. $ exp system/pw owner=scott direct=y file=/tmp/expimp_pipe  pipe를 이용해 export 하는 동시에 compress로 압축 저장해 백업을 받는 스크립트는 다음과 같이 작성할 수 있다.</description>
    </item>
    
    <item>
      <title>SQL*Loader 사용법 (초간단 정리)</title>
      <link>http://ntalbs.github.io/2010/sql-loader/</link>
      <pubDate>Tue, 27 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/sql-loader/</guid>
      <description>&lt;p&gt;간단히 참조할 용도로 정리한다. 자세한 사용법은 &lt;a href=&#34;http://docs.oracle.com/cd/E11882_01/server.112/e22490/ldr_concepts.htm#SUTIL003&#34;&gt;매뉴얼&lt;/a&gt;을 참조해야 한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL 날짜 연산</title>
      <link>http://ntalbs.github.io/2010/postgresql-date/</link>
      <pubDate>Fri, 09 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/postgresql-date/</guid>
      <description>&lt;p&gt;database.sarang.net의 &lt;a href=&#34;http://database.sarang.net/?criteria=pgsql&#34;&gt;PostgreSQL 게시판&lt;/a&gt;에 PostgreSQL에서 &lt;a href=&#34;http://database.sarang.net/?inc=read&amp;amp;aid=8678&amp;amp;criteria=pgsql&amp;amp;subcrit=qna&amp;amp;id=&amp;amp;limit=20&amp;amp;keyword=&amp;amp;page=1&#34;&gt;날짜 연산 관련 질문&lt;/a&gt;이 올라왔다. 답을 생각해보면서 PostgreSQL에서 날짜 관련 함수 및 연산 방법을 간단히 정리해봤다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>아웃라이어</title>
      <link>http://ntalbs.github.io/2010/outliers/</link>
      <pubDate>Tue, 06 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/outliers/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.aladin.co.kr/shop/wproduct.aspx?isbn=8934933151&#34;&gt;아웃라이어&lt;/a&gt;를 읽고 사람들은 &amp;ldquo;1만 시간의 법칙&amp;rdquo;을 이야기한다. 어떤 분야에서 성공하기 위해서는 1만 시간을 투자해야 한다는 것이다. 그리고 이 1만 시간도 &lt;a href=&#34;http://agile.egloos.com/4834009&#34;&gt;&amp;lsquo;그냥 일하는 시간이 아니라 &amp;ldquo;수련을 위해&amp;rdquo; 쓰는 시간이어야 한다&amp;rsquo;&lt;/a&gt;고 한다. 1만 시간의 법칙이 맞는지는 모르겠지만 이 책의 주제는 1만 시간의 법칙이 아니다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Archivelog mode에서의 복구</title>
      <link>http://ntalbs.github.io/2010/recover-db-archive-log-mode/</link>
      <pubDate>Thu, 24 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/recover-db-archive-log-mode/</guid>
      <description>&lt;p&gt;아카이브로그 모드에서 복구는 데이터베이스가 닫힌 상태에서 작업할 수도 있고 열린 상태에서 작업할 수도 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>noarchivelog mode에서의 복구</title>
      <link>http://ntalbs.github.io/2010/recover-db-no-archivelog-mode/</link>
      <pubDate>Wed, 23 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/recover-db-no-archivelog-mode/</guid>
      <description>&lt;p&gt;redo log 백업이 있을 때와 없을 때의 절차가 다르다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>코드 중복과 보이스카우트 규칙</title>
      <link>http://ntalbs.github.io/2010/duplicated-codes/</link>
      <pubDate>Sun, 16 May 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/duplicated-codes/</guid>
      <description>&lt;blockquote class=&#34;blockquote-reverse&#34;&gt;캠핑 장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라!
보이스카우트 규칙 (클린 코드, p50)
&lt;/blockquote&gt;

&lt;p&gt;때로는 아주 사소한 코드 중복이 큰 문제를 만드는 경우도 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var fnCallback = $Fn(function(bSuccess, sMessage, oData) {
  //...
  if (acrobat.isInstalled) {
      this.printUrl = oData.redirectURL + &amp;quot;&amp;amp;isSilent=true&amp;quot;;
  } else {
      this.printUrl = oData.redirectURL;
  }
}, this).bind();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;중복 코드에 민감한 개발자라면 당장에 중복된 부분이 눈에 들어올 것이다. 4째 줄과 6째 줄에 &lt;code&gt;this.printUrl = oData.redirectURL&lt;/code&gt; 부분이 중복이다. 단순한 코드라서 언듯 보기에는 별 문제가 없어 보일는지 모르겠다. 그러나 꼭 그렇지만은 않다. &lt;strong&gt;문제가 생길 가능성이 있다면 꼭 문제가 생긴다.&lt;/strong&gt; 결과가 심각할수록 발생할 확율도 높아지는 것 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>아이디 2</title>
      <link>http://ntalbs.github.io/2010/id-2/</link>
      <pubDate>Thu, 04 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/id-2/</guid>
      <description>&lt;p&gt;카드 사용 정보를 인터넷에서 편하게 조회하기 위해 외환카드 홈페이지에 들어가 인터넷 회원 가입을 하다가 황당한 일을 겪었다. 회원 아이디가 이메일 아이디와 같으면 안 된다며 가입이 안 되는 것이었다. 지금까지 여러 사이트에 가입해봤지만 이런 경우는 처음이었다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>아이디 1</title>
      <link>http://ntalbs.github.io/2010/id-1/</link>
      <pubDate>Tue, 26 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2010/id-1/</guid>
      <description>&lt;p&gt;얼마전 우체국에 연리 5% 정도의 정기예금 상품이 있어 가입하러 갔다. 우체국 직원이 버벅대는 것을 참아가며 30분 가까이 기다려 겨우 신청서를 작성했는데, 처리가 안된다고 했다. 인터넷 뱅킹 아이디에는 반드시 숫자가 포함되어야 하니 내 아이디에도 숫자를 추가하라고 한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>어설퍼진 Google 첫 페이지</title>
      <link>http://ntalbs.github.io/2009/google-main-page/</link>
      <pubDate>Wed, 23 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/google-main-page/</guid>
      <description>&lt;p&gt;Google의 첫 페이지는 단순하고 깔끔한 것으로 유명하다. Google을 좋아하는 것은 당연히 검색을 잘 해주기 때문이지만, Google을 좋아하는 사람이라면 단순하고 깔끔한 첫 페이지도 좋아할 것이다. 그런데 얼마 전 Google의 첫 페이지가 바뀌었다.  예전부터 한국 상황에 맞게 첫 페이지를 변경한다던 뉴스를 들어왔던지라 어떻게든 바뀔 것을 예상은 하고 있었지만 막상 바뀐 모습을 보니 실망스러울 뿐이었다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>주어진 주의 첫 날과 마지막 날 구하기</title>
      <link>http://ntalbs.github.io/2009/first-and-last-day-of-week/</link>
      <pubDate>Thu, 03 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/first-and-last-day-of-week/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://database.sarang.net/&#34;&gt;Database.Sarang.net&lt;/a&gt; Q&amp;amp;A 게시판에 특정 주(몇월 몇째주)를 주면 이 주의 첫 날과 마지막 날을 구하는 방법에 대한 질문이 올라왔다. 열심히 머리를 굴려본 결과 해당 주에 포함된 날짜를 구하면 그 주의 첫 날과 마지막 날을 구할 수 있음을 알게 됐고, 다음과 같은 쿼리를 작성했다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Canvas 테스트</title>
      <link>http://ntalbs.github.io/2009/canvas-test/</link>
      <pubDate>Mon, 16 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/canvas-test/</guid>
      <description>&lt;p&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 태그를 사용해 간단한 그림을 그려봤다. &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 태그를 이용하면 브라우저에 자유자재로 그림을 그릴 수 있다. Firefox와 같은 Gecko 기반의 브라우저에서는 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 요소(element)를 지원하지만 IE에서는 아직 지원하지 않는다. Chrome 브라우저에서도 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;가 잘 동작한다.

&lt;div style=&#34;margin:auto; width:300px; padding:0;&#34;&gt;
  &lt;canvas id=&#34;canvas&#34; width=&#34;300&#34; height=&#34;300&#34;&gt;&lt;/canvas&gt;
&lt;/div&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>오라클 데이터베이스 생성하기</title>
      <link>http://ntalbs.github.io/2009/create-db/</link>
      <pubDate>Wed, 11 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/create-db/</guid>
      <description>&lt;p&gt;오라클 데이터베이스를 생성할 때 보통은 DBCA를 이용한다. 그러나 DBCA만 사용해 DB를 생성하다보면, DBCA를 사용할 수 없는 상황에는 당황하게 된다. 다음은 DBCA를 이용할 수 없는 경우 오라클 데이터베이스를 생성하는 절차다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Undo 테이블스페이스 크기 변경 방법</title>
      <link>http://ntalbs.github.io/2009/resizing-undb-ts/</link>
      <pubDate>Tue, 10 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/resizing-undb-ts/</guid>
      <description>&lt;p&gt;Oracle9i에서 &lt;code&gt;UNDO&lt;/code&gt; 테비블스페이스를 &lt;code&gt;auto mode&lt;/code&gt;로 사용할 때, &lt;code&gt;UNDO&lt;/code&gt; 테이블스페이스를 변경하는 방법이다. &lt;code&gt;Undo&lt;/code&gt; 테이블스페이스의 데이터 파일이 너무 커진 경우 데이터 파일 크기를 줄이고 싶지만, 데이터 파일의 크기를 직접 줄일 수는 없다. 따라서 새로운 &lt;code&gt;UNDO&lt;/code&gt; 테이블스페이스를 만들고 크기를 적절히 지정한 데이터 파일을 할당한 다음, 데이터베이스에 지정된 &lt;code&gt;UNDO&lt;/code&gt; 테이블스페이스를 변경해야 한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>정확한 용어 사용과 신뢰도</title>
      <link>http://ntalbs.github.io/2009/terms-and-reliability/</link>
      <pubDate>Thu, 27 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/terms-and-reliability/</guid>
      <description>&lt;p&gt;어떤 사람이 특정 분야에 대해 얼마나 잘 알고 있을지를 어떻게 평가할 수 있을까? 여러 가지 방법이 있을 수 있겠지만, 나는 다음 두 가지 정도로 평가할 수 있다고 생각한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>login.sql</title>
      <link>http://ntalbs.github.io/2009/login-sql/</link>
      <pubDate>Thu, 20 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/login-sql/</guid>
      <description>&lt;p&gt;&lt;code&gt;SQLPATH&lt;/code&gt; 환경 변수 설정하고 &lt;code&gt;SQLPATH&lt;/code&gt;에 다음 내용으로 login.sql 파일을 만들어 놓는다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>암호</title>
      <link>http://ntalbs.github.io/2009/password/</link>
      <pubDate>Tue, 14 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/password/</guid>
      <description>&lt;p&gt;웹 사이트에 가입할 때마다 계정과 암호를 정해 입력해야 한다. 처음에는 계정을 정하는 것도 어려웠고 사이트마다 달라지는 문제 때문에 고민했다. 아이디로 쓸만한 것은 이미 다른 사람에게 선점당했기 때문이다. 지금은 계정때문에 고민하는 일은 거의 없다. 사람들이 거의 사용할 일이 없을 문자열로 내 아이디를 정했기 때문이다. 다른 사람이 보기에 내 아이디는 알파벳의 무의미한 나열일 뿐이리라. 어떤 이상한 사이트는 아이디도 영문자와 숫자 조합으로 만들라는 이상한 제약조건을 걸어두기도 하지만, 그런 사이트는 가입하지 않으면 그만이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>&#39;한국 전쟁&#39;과 &#39;육이오&#39;</title>
      <link>http://ntalbs.github.io/2009/625/</link>
      <pubDate>Thu, 25 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/625/</guid>
      <description>&lt;p&gt;1950년 6월25일 새벽 북한이 남한을 공격하면서 시작되어 1953년 7월27일 휴전협정으로 중단된 전쟁을 내가 어렸을 때는 &amp;lsquo;육이오 전쟁&amp;rsquo;(사변, 동란), 줄여서 &amp;lsquo;육이오&amp;rsquo;(6.25)라 불렀다. 해마다 6월25일이 되면 학교에서는 북한을 규탄하는 웅변대회나 글짓기 대회 같은 것을 했고, 방송국에서는 육이오 전쟁 관련 영화나 미니시리즈, 다큐멘터리를 방영했다. 요즘은 그냥 조용히 지나가는 것 같다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>과정과 결과</title>
      <link>http://ntalbs.github.io/2009/process-and-result/</link>
      <pubDate>Tue, 23 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/process-and-result/</guid>
      <description>&lt;blockquote class=&#34;blockquote-reverse&#34;&gt;아무리 나쁜 결과로 끝난 일이라 해도 애초에 그 일을 시작한 동기는 선의였다.&lt;br&gt;
- 율리우스 카이사르&lt;/blockquote&gt;

&lt;p&gt;과정은 좋았는데 결과가 형편없게 되기를 바라는가, 과정은 부족하고 문제가 있었지만 결과가 좋게 되기를 바라는가? 둘중 하나를 선택하라면 물론 결과가 좋은 쪽을 선택할 것이다. 모든 사람이 마찬가지일 것이다. 문제는 현실에서는 이 둘중 하나를 선택하는 경우는 없다는 것이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>&#39;웬&#39;과 &#39;왠&#39;</title>
      <link>http://ntalbs.github.io/2009/wen-wan/</link>
      <pubDate>Thu, 21 May 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/wen-wan/</guid>
      <description>&lt;p&gt;예전에 출판사 사장님께 메일을 받았는데, 메일 내용 중 &lt;strong&gt;&amp;lsquo;왠만하면&amp;hellip;&amp;rsquo;&lt;/strong&gt;이란 문구가 보였다. 올바르게 쓰려면 &lt;strong&gt;&amp;lsquo;웬만하면&amp;rsquo;&lt;/strong&gt;이라고 써야 한다. 출판업계에 계신 분이니 오타라 생각했는데 웬걸, 사장님은 여지껏 &amp;lsquo;왠만하면&amp;rsquo;이 맞는 줄 알고 계셨단다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>데이터 생성 SQL</title>
      <link>http://ntalbs.github.io/2009/data-generator/</link>
      <pubDate>Tue, 14 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/data-generator/</guid>
      <description>&lt;p&gt;Oracle에서라면 다음 쿼리로 row를 생성할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- 1~100까지 숫자 생성 (100 rows)
select level from dual connect by level &amp;lt;= 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 row 생성 쿼리를 이용하면 테스트 데이터를 원하는 만큼 생성하는 것도 쉽고, 간단한 문제를 풀 때도 유용하다. 예를 들어 얼마 전 kldp.org에 올라왔던 1~45의 숫자 중 랜덤하게 6개를 선택해 표시하는 문제도 다음과 같이 SQL로 풀 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>신용카드, 정말 재테크의 적인가?</title>
      <link>http://ntalbs.github.io/2009/credit-card/</link>
      <pubDate>Fri, 10 Apr 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/credit-card/</guid>
      <description>&lt;p&gt;재테크와 관련된 책을 보면 신용카드를 악마와 같이 취급하는 경우가 많은 것 같다. 신용카드 때문에 돈을 더 많이 쓰게 된다는 것이다. 많은 사람들에게 맞는 말이지만 모두에게 해당되는 것은 아니다. 자신이 소비를 통제할 수 있다면 신용카드를 활용하는 것도 재테크의 일환이라 생각한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>연금저축, 과연 이득일까</title>
      <link>http://ntalbs.github.io/2009/annuity-savings/</link>
      <pubDate>Fri, 06 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/annuity-savings/</guid>
      <description>&lt;p&gt;혼자 사는 월급쟁이가 소득공제를 많이 받기 위해 할 수 있는 것은 그다지 많지 않다. 그래도 한 푼이라도 세금을 절약하기 위해 할 수 있는 것에는 다음과 같은 것들이 있다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;보장성 보험 - 100만원까지 소득공제&lt;/li&gt;
&lt;li&gt;장기주택마련저축 - 불입액의 40%(최대 300만원)까지 소득공제&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;개인연금저축 - 300만원까지 전액 소득공제&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;카드사용액 - 연 소득의 20%를 초과하는 금액의 20% 소득공제
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이중 당장의 소득공제 효과는 크지만 장기적으로 이익인지에 대해 긴가민가한 것이 있으니 바로 개인연금저축이다. 연봉이 4천만원 정도 되고 딸린 식구가 없다면 1년에 300만원을 저금하는 것은 그리 어려운 일이 아니다. 그리고 이 경우 300만원의 17%에 해당하는 51만원의 세금을 절약할 수 있으니 절세 효과가 매우 큰 것처럼 보이는 것도 당연하다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>&#39;우리&#39;와 &#39;저희&#39;</title>
      <link>http://ntalbs.github.io/2009/uri/</link>
      <pubDate>Wed, 25 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/uri/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&amp;lsquo;우리&amp;rsquo;&lt;/strong&gt;와 &lt;strong&gt;&amp;lsquo;저희&amp;rsquo;&lt;/strong&gt;의 뜻을 모르는 사람은 없을 것이다. 그렇다. &amp;lsquo;저희&amp;rsquo;는 &amp;lsquo;우리&amp;rsquo;의 낮춤말이다. 그런데 &amp;lsquo;저희&amp;rsquo;를 잘못 사용하는 경우를 자주 접하게 된다. 사실 &amp;lsquo;저희&amp;rsquo;는 단순하게 &amp;lsquo;우리&amp;rsquo;의 낮춤말일 뿐 아니라 &amp;lsquo;우리&amp;rsquo;와 달리 듣는이를 포함하지 않는다. &amp;lsquo;저희&amp;rsquo;는 보통 높임말을 쓸 때 사용하는데, 듣는 이를 포함한다면 듣는 이까지 낮추는 것이 되고 그러면 높임말을 하는 의미가 없어질 것이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DBMS 성능 테스트</title>
      <link>http://ntalbs.github.io/2009/db-performance/</link>
      <pubDate>Mon, 16 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/db-performance/</guid>
      <description>&lt;p&gt;지금까지 주로 Oracle을 사용해왔으나, 현재의 회사에서는 MySQL을 주로 사용하며 일부 시스템에서 PostgreSQL을 사용한다. 현재 MySQL을 사용하는 부분에서 지속적인 성능 문제가 발생하고 있는데, 이는 MySQL을 충분히 알지 못해 나타나는 문제일 수도 있다. MySQL을 사용하면서 지금까지 알고 있던 DBMS에 대한 지식(주로 Oracle에 대한)이 무용지물인 경우가 많았기 때문이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>데이터베이스 링크 생성</title>
      <link>http://ntalbs.github.io/2009/create-dblink/</link>
      <pubDate>Mon, 16 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/create-dblink/</guid>
      <description>&lt;p&gt;데이터베이스 링크를 만들 때 &lt;code&gt;using&lt;/code&gt; 뒤에 다음과 같이 connect string을 직접 적어줄 수도 있다. 데이터베이스 링크만을 위해 &lt;code&gt;tnsnames.ora&lt;/code&gt; 파일에 &lt;code&gt;tnsalias&lt;/code&gt;를 등록하지 않아도 되겠다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>고정관념</title>
      <link>http://ntalbs.github.io/2009/fixed-idea/</link>
      <pubDate>Fri, 02 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2009/fixed-idea/</guid>
      <description>&lt;p&gt;우리나라 사람이라면 오래된 도자기에는 당연히 한자와 동양화가 그려져 있을 거라 생각할 것이다. 주위에서 그런 것밖에 보지 못하기 때문이다. 그러나 꼭 그러라는 법은 없다. 글자는 알파벳으로 쓰여 있고, 그림도 동양적인 것과는 전혀 다른 도자기도 있다. 아래 그림처럼.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>스위스에서 우연히 발견한 성</title>
      <link>http://ntalbs.github.io/2008/swiss-castle/</link>
      <pubDate>Mon, 15 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/swiss-castle/</guid>
      <description>&lt;p&gt;나는 계획을 세워 여행하는 편은 아니다. 그냥 언제쯤 가야지 하고 생각하고 있다가 여건이 되면 한 1~2주 전부터 부랴부랴 준비를 한다. 즉흥적으로 여행을 결정하니 계획을 제대로 세울 리 없다. 잠 잘 호텔 예약하는 정도면 다행이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWR 기본</title>
      <link>http://ntalbs.github.io/2008/awr/</link>
      <pubDate>Fri, 12 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/awr/</guid>
      <description>&lt;p&gt;Oracle10g부터 추가된 AWR(Automatic Workload Repository) 기본 사용법이다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dbms_metadata를 이용한 DDL 추출</title>
      <link>http://ntalbs.github.io/2008/dbms-metadata/</link>
      <pubDate>Thu, 04 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/dbms-metadata/</guid>
      <description>&lt;p&gt;&lt;code&gt;dbms_metadata&lt;/code&gt; 패키지를 이용해 DDL 추출하는 방법이다. 특정 스키마의 모든 DB 객체에 대한 DDL을 추출하려면 export를 사용하는 것이 더 편하다. (&lt;a href=&#34;http://ntalbs.github.io/2008/extract-ddl/&#34;&gt;특정 스키마의 DDL 추출 참조&lt;/a&gt;)
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>오라클 인덱스 용량 산정 방법</title>
      <link>http://ntalbs.github.io/2008/sizing-index/</link>
      <pubDate>Tue, 18 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/sizing-index/</guid>
      <description>&lt;p&gt;인덱스 용량을 산정하기 위한 방법인데 조금 복잡하다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>v$session과 주변 테이블 정리</title>
      <link>http://ntalbs.github.io/2008/vsession/</link>
      <pubDate>Mon, 17 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/vsession/</guid>
      <description>오라클의 다이나믹 퍼포먼스 뷰인 v$session과 v$process, v$transaction등 관련 테이블간의 연관 관계를 정리해봤다. 요즘은 Orange나 Toad와 같은 도구를 사용하기 때문에, 이런 테이블을 직접 조회할 일이 많지는 않지만, 가끔씩 아쉬울 때도 있다.</description>
    </item>
    
    <item>
      <title>오라클 테이블 용량 산정 방법</title>
      <link>http://ntalbs.github.io/2008/sizing-table/</link>
      <pubDate>Mon, 17 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/sizing-table/</guid>
      <description>&lt;p&gt;테이블 용량을 산정하기 위한 방법인데 조금 복잡하다. 어차피 추정이므로 간단하게 $(평균\ row \ 크기) \times (데이터\ 건수) \times 1.3$ 정도로 해도 되지 않을까 싶다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>특정 스키마 DDL 추출</title>
      <link>http://ntalbs.github.io/2008/extract-ddl/</link>
      <pubDate>Sat, 08 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/extract-ddl/</guid>
      <description>&lt;p&gt;다음과 같이 하면 exp/imp 도구를 사용해 특정 스키마의 DDL을 추출할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>무한 row 생성 쿼리</title>
      <link>http://ntalbs.github.io/2008/row-generator/</link>
      <pubDate>Mon, 03 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/row-generator/</guid>
      <description>&lt;p&gt;Oracle에서는 다음과 같이 &lt;code&gt;connect by&lt;/code&gt;절을 사용해 원하는 만큼 row를 만들어낼 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>오라클에서 factorial 구하기</title>
      <link>http://ntalbs.github.io/2008/oracle-factorial/</link>
      <pubDate>Mon, 03 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/oracle-factorial/</guid>
      <description>&lt;p&gt;오라클에 &lt;code&gt;factorial&lt;/code&gt; 함수가 없지만 다음과 같이 구할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>인덱스 비교</title>
      <link>http://ntalbs.github.io/2008/comp-indexes/</link>
      <pubDate>Mon, 03 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/comp-indexes/</guid>
      <description>&lt;p&gt;개발DB와 테스트DB, 또는 테스트DB와 운영DB간 인덱스를 비교할 때는 다음 쿼리를 사용할 수 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>테이블 비교</title>
      <link>http://ntalbs.github.io/2008/comp-tables/</link>
      <pubDate>Mon, 03 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/comp-tables/</guid>
      <description>프로젝트를 하다보면 개발DB와 테스트DB 또는 테스트DB와 운영DB간 스키마를 비교해 차이점이 없는지 확인할 일이 많다. 다음은 테이블과 컬럼을 비교하는 스크립트다. Full Outer Join을 사용할 수도 있으나, 결과가 제대로 나오지 않거나 에러(ora-600)가 발생한다(Oracle 9i, 10g에서 모두 에러 발생했음). 그냥 left outer join, right outer join한 후 둘을 union 하는 것이 결과가 제대로 나온다. (with절은 Oracle 9i부터 사용 가능함.)
with a as ( select table_name, column_name, decode(data_type, &#39;CHAR&#39;, data_type||&#39;(&#39;||data_length||&#39;)&#39;, &#39;VARCHAR2&#39;, data_type||&#39;(&#39;||data_length||&#39;)&#39;, &#39;NUMBER&#39;, data_type||&#39;(&#39;||data_precision||&#39;,&#39;||data_scale||&#39;)&#39;, data_type) data_type, nullable from all_tab_columns where owner = &#39;XXX&#39; and table_name not like &#39;BIN$%&#39; ), b as ( select table_name, column_name, decode(data_type, &#39;CHAR&#39;, data_type||&#39;(&#39;||data_length||&#39;)&#39;, &#39;VARCHAR2&#39;, data_type||&#39;(&#39;||data_length||&#39;)&#39;, &#39;NUMBER&#39;, data_type||&#39;(&#39;||data_precision||&#39;,&#39;||data_scale||&#39;)&#39;, data_type) data_type, nullable from all_tab_columns&amp;lt;b id=&amp;quot;ncsj&amp;quot;&amp;gt;@testdb&amp;lt;/b&amp;gt; where owner = &#39;XXX&#39; and table_name not like &#39;BIN$%&#39; ) select decode(a.</description>
    </item>
    
    <item>
      <title>SELECT 결과를 shell 변수로 가져오기</title>
      <link>http://ntalbs.github.io/2008/select-shell/</link>
      <pubDate>Sat, 01 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/select-shell/</guid>
      <description>&lt;p&gt;select한 결과를 shell에서 참조해야 하는 경우 다음과 같이 하면 된다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL*Plus에서 &#39;&amp;&#39;가 포함된 문자열을 변수로 인식하지 않게 하기</title>
      <link>http://ntalbs.github.io/2008/sqlplus-ampersand/</link>
      <pubDate>Sat, 01 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/sqlplus-ampersand/</guid>
      <description>&lt;p&gt;문자열 자체에 &lt;code&gt;&amp;amp;&lt;/code&gt;가 포함되어 있는 경우 SQL*Plus에서 &lt;code&gt;&amp;amp;&lt;/code&gt; 뒤의 단어를 변수로 인식해 그에 대한 값의 입력을 요구한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>db_files 개수에 포함되는 파일은?</title>
      <link>http://ntalbs.github.io/2008/db-files/</link>
      <pubDate>Sat, 01 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/db-files/</guid>
      <description>&lt;p&gt;현재 우리 운영DB는 &lt;code&gt;db_files&lt;/code&gt; 파라미터 값이 매우 작게 잡혀있다. 따라서 빨리 값을 늘려줘야 하는데, 당장 운영중인 DB를 내리고 파라미터 값을 바꿀 수는 없다. 그런데 여기서 궁금증 하나 생겼다. &lt;code&gt;db_files&lt;/code&gt;는 데이터 파일 개수만 제한하는 것일까, 아니면 temp 파일도 여기에 포함되는 것일까? 혹시 온라인 리두로그는? 혹시 컨트롤 파일도 포함되는 것일까? 지금까지는 당연히 데이터 파일 수를 제한하는 것이라 생각했었는데, 이런 궁금증이 생기니 확신을 할 수가 없다. 지금까지 명확하게 알지 못하고 작업하다가 사고친 게 어디 한두번이던가?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LONG형 컬럼을 가진 테이블의 테이블스페이스 이동</title>
      <link>http://ntalbs.github.io/2008/long-move-ts/</link>
      <pubDate>Fri, 31 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/long-move-ts/</guid>
      <description>&lt;p&gt;테이블을 다른 테이블스페이스로 옮기려면 다음과 같이 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER TABLE t MOVE TABLESPACE ts_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그러나 &lt;code&gt;LONG&lt;/code&gt;형 컬럼을 포함하고 있는 테이블에 위 명령을 실행하면 &lt;code&gt;ora-00997&lt;/code&gt; 에러가 발생한다. CTAS를 사용해 테이블 복사를 시도해도 같은 에러가 발생한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQL*Plus 프롬프트 설정</title>
      <link>http://ntalbs.github.io/2008/sqlplus-prompt/</link>
      <pubDate>Fri, 31 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/sqlplus-prompt/</guid>
      <description>&lt;p&gt;SQL*Plus의 프롬프트를 &lt;code&gt;username@INSTANCE_NAME &amp;gt;&lt;/code&gt;과 같은 식으로 설정하면 현재 로그인한 인스턴스와 사용자 이름을 확인할 수 있어 편하다. logn.sql 스크립트를 만들어 여기에 프롬프트 설정 코드를 넣어두면 된다. Effective Oracle 책(p79)에는 설정 코드가 조금 복잡하게 나와 있다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>인덱스 중복과 클러스터링 팩터</title>
      <link>http://ntalbs.github.io/2008/index-dup-and-clustering-factor/</link>
      <pubDate>Fri, 31 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/index-dup-and-clustering-factor/</guid>
      <description>&lt;p&gt;테이블 T에 다음과 같은 인덱스가 있다면 &lt;code&gt;ix01&lt;/code&gt;은 삭제해야 한다고 생각했다.
* &lt;code&gt;ix01&lt;/code&gt;: &lt;code&gt;a&lt;/code&gt;
* &lt;code&gt;ix02&lt;/code&gt;: &lt;code&gt;a+b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ix02&lt;/code&gt;을 이용하면 &lt;code&gt;ix01&lt;/code&gt;을 사용해야 하는 경우를 모두 포괄할 수 있으니 &lt;code&gt;ix02&lt;/code&gt;만 남겨놓고 나머지는 삭제하는 것이 맞다고 생각했던 것이다. 그러나 문제가 항상 그렇게 단순하지만은 않은 듯 하다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DB 링크 삭제 시 제약사항</title>
      <link>http://ntalbs.github.io/2008/deleting-db-link/</link>
      <pubDate>Thu, 30 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/deleting-db-link/</guid>
      <description>&lt;p&gt;불필요한 데이터베이스 링크가 난무하는 것 같아 정리하기로 마음을 먹었다. 일단 개발DB에서 운영DB로의 데이터베이스 링크는 허용할 수 없으므로 이것부터 삭제하기로 했다. 개발DB에 &lt;code&gt;sys&lt;/code&gt; 계정으로 로그인한 다음 &lt;code&gt;dba_db_links&lt;/code&gt; 테이블을 조회해 개발DB에서 운영DB로 연결되는 데이터베이스 링크를 하나씩 확인했다. &lt;code&gt;public&lt;/code&gt; 데이터베이스 링크를 삭제할 때는 &lt;code&gt;drop public database link ...&lt;/code&gt; 명령으로 간단하게 삭제했다. 그리고 &lt;code&gt;xxx&lt;/code&gt; 스키마에 있는 데이터베이스 링크를 삭제하기 위해 &lt;code&gt;drop database link xxx.{db_link_name}&lt;/code&gt; 명령을 날렸는데, 데이터베이스 링크를 찾을 수 없다며 &lt;code&gt;ora-02024&lt;/code&gt; 에러가 발생했다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Oracle XDB 비활성화 방법</title>
      <link>http://ntalbs.github.io/2008/disabling-xdb-in-oracle/</link>
      <pubDate>Thu, 30 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/disabling-xdb-in-oracle/</guid>
      <description>&lt;p&gt;Oracle9i부터는 XML DB가 포함되어 있는데, 이 녀석은 HTTP/WebDAV과 FTP 포트로 각각 &lt;code&gt;8080&lt;/code&gt;과 &lt;code&gt;2100&lt;/code&gt; 포트를 사용한다. 데이터베이스 서버에 Oracle만 실행 중이라면 XML DB가 떠있다고 해서 당장 문제될 것이 없으니 그냥 무시할 수도 있다(보안을 생각한다면 내려야 하겠지만). 개발 서버나 테스트 서버의 경우 &lt;code&gt;8080&lt;/code&gt; 포트를 쓰는 다른 서버 프로그램(가령 Tomcat 같은)을 띄워야 하는 경우 포트가 충돌해 문제가 발생할 수 있다. Oracle9i에는 그나마 DBCA를 이용해 DB를 생성할 때 XML DB를 제외할 수 있는 옵션이 있었던 것 같은데, 10g에는 그 옵션이 사라져버렸다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>하지 말 것 목록</title>
      <link>http://ntalbs.github.io/2008/not-to-do-things/</link>
      <pubDate>Thu, 30 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/not-to-do-things/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;사용자로부터 문자열 리터럴을 입력받아 SQL을 만들지 말 것. (eg: 항상 바인드 변수를 사용할 것)&lt;/li&gt;
&lt;li&gt;데이터가 없는 상태 또는 실제 시스템의 극히 일부 데이터만 있는 상태에서 테스트하지 말 것. 실제 시스템의 통계 정보를 불러들이는 것도 소용 없음. &lt;strong&gt;실제로 어떻게 되는지를 보려면 실제 만큼의 데이터가 필요함.&lt;/strong&gt;</description>
    </item>
    
    <item>
      <title>DBMS_RANDOM 패키지 사용법</title>
      <link>http://ntalbs.github.io/2008/dbms-random/</link>
      <pubDate>Wed, 29 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/dbms-random/</guid>
      <description>&lt;p&gt;랜덤한 숫자나 문자열을 만들 때 &lt;code&gt;DBMS_RANDOM&lt;/code&gt; 패키지를 사용하면 된다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>set timing을 이용한 SQL 실행 속도 측정법</title>
      <link>http://ntalbs.github.io/2008/set-timing/</link>
      <pubDate>Wed, 29 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/set-timing/</guid>
      <description>&lt;p&gt;SQL*Plus에서 실행시킨 SQL 또는 PL/SQL 블록의 실행속도를 보려면 다음과 같이 &lt;code&gt;set timing on&lt;/code&gt;을 사용하면 된다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TIMESTAMP 컬럼으로 파티션 하는 방법</title>
      <link>http://ntalbs.github.io/2008/partition-by-timestamp/</link>
      <pubDate>Tue, 28 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/partition-by-timestamp/</guid>
      <description>&lt;p&gt;일반적으로 range 파티션 테이블을 만들 때는 다음과 같이 한다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>날짜 데이터 저장</title>
      <link>http://ntalbs.github.io/2008/storing-dates/</link>
      <pubDate>Tue, 28 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/storing-dates/</guid>
      <description>&lt;p&gt;DBMS마다 날짜와 시간을 저장할 수 있는 데이터 타입을 제공한다. 그러나 날짜와 시간을 저장하는 데 &lt;code&gt;&#39;YYYYMMDD&#39;&lt;/code&gt;, &lt;code&gt;&#39;HH24MISS&#39;&lt;/code&gt; 형식의 문자열을 사용하는 경우도 많다. 인터넷 문서나 오래된 책을 찾아보면 날짜를 저장할 때 &lt;code&gt;DATE&lt;/code&gt; 타입을 사용하지 말고 문자열로 저장하는 것이 좋다고 주장하는 경우도 흔하게 볼 수 있다. 날짜나 시간 데이터를 저장하는 데 문자열 데이터 타입을 사용하면 불필요하게 저장 공간이 늘어날 뿐 아니라 데이터 정합성이 떨어지고 성능에까지 영향을 미칠 수 있다. 이에 대해서 하나씩 살펴보자
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>올바른 데이터 타입 사용하기</title>
      <link>http://ntalbs.github.io/2008/data-type/</link>
      <pubDate>Tue, 28 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/data-type/</guid>
      <description>&lt;p&gt;데이터베이스에 테이블을 만들 때 각 컬럼의 데이터 타입을 정하는 것은 무척 쉬워 보인다. 데이터베이스에서 기본으로 제공하는 데이터 타입 종류가 엄청나게 많은 것도 아니고, 테이블에 저장할 데이터란 것도 대부분의 경우는 뻔하기 때문이다. 그러나 실제 데이터베이스를 보면 데이터 타입이 잘못 지정된 컬럼을 매우 자주 볼 수 있으며, 신규 테이블 생성을 요청할 때나 또는 컬럼 추가를 요청할 때도 데이터 타입을 잘못 지정해 요청하는 경우가 많다.

일단 테이블에 데이터가 쌓이기 시작하면 잘못된 것을 알아도 바꾸기가 쉽지 않은 경우가 대부분이므로, 컬럼의 데이터 타입을 정할 때는 신중하게 생각해 저장하고자 하는 데이터에 맞는 데이터 타입을 선정해야 한다. 다음은 오라클 데이터베이스에서 기본적인 데이터 타입을 선택하는 방법이다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Direct-path Insert시 주의사항</title>
      <link>http://ntalbs.github.io/2008/direct-path-load/</link>
      <pubDate>Mon, 27 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/direct-path-load/</guid>
      <description>뭔가에 대해 어설프게 아는 것은 큰 위험을 초래할 수 있다. 이번에는 Direct-path Insert에 대한 어설픈 지식으로 큰 사고를 낼 뻔 했다. 지금까지 알고 있었던 사실은 Direct-path Insert를 이용하면 redo와 undo 로깅을 생략해 성능을 향상시킬 수 있다는 것이었다. 따라서 테이블에 대량의 데이터를 넣을 때 이 방법을 활용하곤 했다. 그러나 Direct-path INSERT를 하는 동안 테이블에는 LOCK이 걸리고 작업이 끝날 때까지 해당 테이블에 DML 작업을 할 수 없게 된다는 사실은 알지 못했다. 만약 확인하지 않고 거래 데이터를 전환해 넣을 때 Direct-path INSERT를 썼더라면 장애가 생길 뻔 했다.</description>
    </item>
    
    <item>
      <title>다이렉트 로드와 인덱스</title>
      <link>http://ntalbs.github.io/2008/direct-load-and-index/</link>
      <pubDate>Mon, 27 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/direct-load-and-index/</guid>
      <description>&lt;p&gt;대량 데이터를 로드할 때 항상 궁금했던 것이 있다. 다음 두 가지 방법 중 어떤 것이 빠를까 하는 것이다.
* 방법1: 인덱스가 있는 상태에서 그냥 다이렉트 모드로 로드
* 방법2: 인덱스를 날리고 로드한 다음 인덱스를 생성
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>컬럼 추가와 디폴트 값</title>
      <link>http://ntalbs.github.io/2008/add-column-and-default-value/</link>
      <pubDate>Mon, 27 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/add-column-and-default-value/</guid>
      <description>&lt;p&gt;기존 테이블에 컬럼을 추가할 때 디폴트 값을 지정하면 기존 데이터는 건드리지 않고 새로 추가되는 데이터에 대해서만 디폴드 값이 적용되는 줄 알고 있었다. 그런데 작업을 하다가 그동안 잘못 알고 있었다는 것을 알게 되었다. 다음 두 작업은 완전히 다르게 진행된다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MINIMIZE RECORDS_PER_BLOCK</title>
      <link>http://ntalbs.github.io/2008/records-per-block/</link>
      <pubDate>Sat, 25 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/records-per-block/</guid>
      <description>&lt;p&gt;SQL Reference에 보면 &lt;code&gt;records_per_block&lt;/code&gt;절에 대해 다음과 같이 설명되어 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;instruct Oracle Database to calculate the largest number of records in any block in the table and to limit future inserts so that no block can contain more than that number of records.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>코드 수정</title>
      <link>http://ntalbs.github.io/2008/refactoring/</link>
      <pubDate>Sat, 25 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/refactoring/</guid>
      <description>&lt;p&gt;소스코드를 보다가 다음과 같은 코드를 발견했다. 명령행 인수 분석해 딕셔너리에 넣는 코드인데, 이렇게 복잡할 필요가 있을까 생각되어 잠시 코드를 들여다 봤다.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>원하는 시간에만 DB 작업 실행하기</title>
      <link>http://ntalbs.github.io/2008/dbms-job/</link>
      <pubDate>Fri, 24 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://ntalbs.github.io/2008/dbms-job/</guid>
      <description>&lt;p&gt;예전에 &lt;a href=&#34;http://database.sarang.net/?criteria=oracle&#34;&gt;database.sarang.net 오라클 게시판&lt;/a&gt;에 &lt;code&gt;DBMS_JOB&lt;/code&gt;을 이용해 원하는 작업을 08시, 14시, 20시에 실행시키는 방법을 묻는 질문이 올라왔다. 작업 간격이 규칙적일 때는 문제가 간단하지만 원하는 시간 간격이 불규칙하므로 그냥 JOB을 세 개 등록하면 어떻겠냐고 답했더니 이번에는 이 작업을 평일에만 실행시키게 하고 싶다고 했다. 즉 평일 08시, 14시, 20시에 작업이 실행되도록 하고 싶다는 것이었다.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>